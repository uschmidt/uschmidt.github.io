{"version":3,"sources":["webpack://dashjs/webpack/universalModuleDefinition","webpack://dashjs/webpack/bootstrap","webpack://dashjs/./src/streaming/constants/Constants.js","webpack://dashjs/./src/core/Utils.js","webpack://dashjs/./src/core/events/EventsBase.js","webpack://dashjs/./src/core/errors/ErrorsBase.js","webpack://dashjs/./node_modules/process/browser.js","webpack://dashjs/./node_modules/path-browserify/index.js","webpack://dashjs/./src/streaming/vo/metrics/HTTPRequest.js","webpack://dashjs/./src/streaming/protection/CommonEncryption.js","webpack://dashjs/./src/streaming/protection/vo/MediaCapability.js","webpack://dashjs/./src/streaming/protection/vo/KeySystemConfiguration.js","webpack://dashjs/./src/streaming/protection/errors/ProtectionErrors.js","webpack://dashjs/./src/streaming/protection/vo/LicenseRequest.js","webpack://dashjs/./src/streaming/protection/vo/LicenseResponse.js","webpack://dashjs/./src/streaming/protection/controllers/ProtectionController.js","webpack://dashjs/./src/streaming/protection/vo/KeyPair.js","webpack://dashjs/./src/streaming/protection/vo/ClearKeyKeySet.js","webpack://dashjs/./src/streaming/constants/ProtectionConstants.js","webpack://dashjs/./src/streaming/protection/drm/KeySystemClearKey.js","webpack://dashjs/./src/streaming/protection/drm/KeySystemW3CClearKey.js","webpack://dashjs/./src/streaming/protection/drm/KeySystemWidevine.js","webpack://dashjs/./src/streaming/protection/drm/KeySystemPlayReady.js","webpack://dashjs/./src/streaming/protection/servers/DRMToday.js","webpack://dashjs/./src/streaming/protection/servers/PlayReady.js","webpack://dashjs/./src/streaming/protection/servers/Widevine.js","webpack://dashjs/./src/streaming/protection/servers/ClearKey.js","webpack://dashjs/./src/streaming/protection/controllers/ProtectionKeyController.js","webpack://dashjs/./src/streaming/protection/ProtectionEvents.js","webpack://dashjs/./src/streaming/protection/vo/NeedKey.js","webpack://dashjs/./src/streaming/protection/vo/KeyMessage.js","webpack://dashjs/./src/streaming/protection/vo/KeySystemAccess.js","webpack://dashjs/./src/streaming/protection/models/ProtectionModel_21Jan2015.js","webpack://dashjs/./src/streaming/protection/models/ProtectionModel_3Feb2014.js","webpack://dashjs/./src/streaming/protection/models/ProtectionModel_01b.js","webpack://dashjs/./src/streaming/protection/Protection.js","webpack://dashjs/./src/streaming/vo/DashJSError.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","constants","this","init","STREAM","VIDEO","AUDIO","TEXT","MUXED","IMAGE","STPP","TTML","VTT","WVTT","ABR_STRATEGY_DYNAMIC","ABR_STRATEGY_BOLA","ABR_STRATEGY_L2A","ABR_STRATEGY_LoLP","ABR_STRATEGY_THROUGHPUT","ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA","ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING","ABR_FETCH_THROUGHPUT_CALCULATION_AAST","LIVE_CATCHUP_MODE_DEFAULT","LIVE_CATCHUP_MODE_LOLP","MOVING_AVERAGE_SLIDING_WINDOW","MOVING_AVERAGE_EWMA","BAD_ARGUMENT_ERROR","MISSING_CONFIG_ERROR","TRACK_SWITCH_MODE_ALWAYS_REPLACE","TRACK_SWITCH_MODE_NEVER_REPLACE","TRACK_SELECTION_MODE_FIRST_TRACK","TRACK_SELECTION_MODE_HIGHEST_BITRATE","TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY","TRACK_SELECTION_MODE_WIDEST_RANGE","TRACK_SELECTION_MODE_HIGHEST_SELECTION_PRIORITY","CMCD_MODE_QUERY","CMCD_MODE_HEADER","LOCATION","INITIALIZE","TEXT_SHOWING","TEXT_HIDDEN","CC1","CC3","UTF8","SCHEME_ID_URI","START_TIME","SERVICE_DESCRIPTION_LL_SCHEME","SUPPLEMENTAL_PROPERTY_LL_SCHEME","XML","ARRAY_BUFFER","DVB_REPORTING_URL","DVB_PROBABILITY","VIDEO_ELEMENT_READY_STATES","HAVE_NOTHING","HAVE_METADATA","HAVE_CURRENT_DATA","HAVE_FUTURE_DATA","HAVE_ENOUGH_DATA","Utils","dest","source","copy","empty","mixin","src","Array","length","push","clone","url","params","modifiedUrl","URL","forEach","param","searchParams","set","href","e","headerStr","headers","headerPairs","trim","split","ilen","headerPair","index","indexOf","substring","dt","Date","getTime","replace","Math","random","floor","toString","string","hash","charCodeAt","originalUrl","targetUrl","original","target","protocol","origin","relativePath","path","relative","pathname","substr","lastIndexOf","startIndexOffset","EventsBase","events","config","override","publicOnly","evt","ErrorsBase","errors","err","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","arguments","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","normalizeArray","parts","allowAboveRoot","up","last","splice","unshift","filter","xs","f","res","resolve","resolvedPath","resolvedAbsolute","TypeError","charAt","join","normalize","isAbsolute","trailingSlash","paths","slice","from","to","arr","start","end","fromParts","toParts","min","samePartsLength","outputParts","sep","delimiter","dirname","code","hasRoot","matchedSlash","basename","ext","extname","startDot","startPart","preDotState","str","HTTPRequest","tcpid","type","actualurl","range","trequest","tresponse","responsecode","interval","trace","_stream","_tfinish","_mediaduration","_quality","_responseHeaders","_serviceLocation","HTTPRequestTrace","b","GET","HEAD","MPD_TYPE","XLINK_EXPANSION_TYPE","INIT_SEGMENT_TYPE","INDEX_SEGMENT_TYPE","MEDIA_SEGMENT_TYPE","BITSTREAM_SWITCHING_SEGMENT_TYPE","MSS_FRAGMENT_INFO_SEGMENT_TYPE","LICENSE","OTHER_TYPE","CommonEncryption","cpArray","retVal","cp","schemeIdUri","toLowerCase","pssh","offset","view","DataView","getUint8","getUint32","keySystem","initData","psshList","parsePSSHList","uuid","cpData","BASE64","__text","decodeArray","buffer","data","dv","byteCursor","nextBox","systemID","boxStart","byteLength","val","MediaCapability","contentType","robustness","KeySystemConfiguration","audioCapabilities","videoCapabilities","distinctiveIdentifier","persistentState","sessionTypes","initDataTypes","protectionErrors","MEDIA_KEYERR_CODE","MEDIA_KEYERR_UNKNOWN_CODE","MEDIA_KEYERR_CLIENT_CODE","MEDIA_KEYERR_SERVICE_CODE","MEDIA_KEYERR_OUTPUT_CODE","MEDIA_KEYERR_HARDWARECHANGE_CODE","MEDIA_KEYERR_DOMAIN_CODE","MEDIA_KEY_MESSAGE_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE","SERVER_CERTIFICATE_UPDATED_ERROR_CODE","KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE","KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE","KEY_SESSION_CREATED_ERROR_CODE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE","MEDIA_KEYERR_UNKNOWN_MESSAGE","MEDIA_KEYERR_CLIENT_MESSAGE","MEDIA_KEYERR_SERVICE_MESSAGE","MEDIA_KEYERR_OUTPUT_MESSAGE","MEDIA_KEYERR_HARDWARECHANGE_MESSAGE","MEDIA_KEYERR_DOMAIN_MESSAGE","MEDIA_KEY_MESSAGE_ERROR_MESSAGE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE","SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE","KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE","KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE","KEY_SESSION_CREATED_ERROR_MESSAGE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE","LicenseRequest","method","responseType","withCredentials","messageType","sessionId","LicenseResponse","ProtectionController","instance","logger","pendingNeedKeyData","mediaInfoArr","protDataSet","sessionType","robustnessLevel","licenseRequestFilters","licenseResponseFilters","protectionKeyController","protectionModel","eventBus","debug","needkeyRetries","cmcdModel","settings","checkConfig","createKeySession","cdmData","initDataForKS","getPSSHForKeySystem","protData","getProtData","_isInitDataDuplicate","getSessionType","error","trigger","KEY_SESSION_CREATED","DashJSError","ProtectionErrors","message","systemString","currentInitData","getAllInitData","initDataEquals","loadKeySession","sessionID","setMediaElement","element","NEED_KEY","onNeedKey","keySystemString","getKeySystemConfiguration","audioRobustness","videoRobustness","ksSessionType","media","codec","selectKeySystem","supportedKS","fromManifest","sort","ksA","ksB","ks","priority","undefined","ksIdx","keySystemAccess","self","requestedKeySystems","configs","onKeySystemAccessComplete","event","KEY_SYSTEM_ACCESS_COMPLETE","INTERNAL_KEY_SYSTEM_SELECTED","onKeySystemSelected","KEY_SYSTEM_SELECTED","info","getKeySystem","serverCertificate","setServerCertificate","isClearKey","kids","keys","clearkeys","TextEncoder","encode","JSON","stringify","requestKeySystemAccess","_selectInitialKeySystem","findIndex","entry","_selectWithExistingKeySystem","sendLicenseRequestCompleteEvent","LICENSE_REQUEST_COMPLETE","onKeyStatusChanged","KEY_STATUSES_CHANGED","status","onKeyMessage","keyMessage","KEY_MESSAGE","sessionToken","licenseServerData","getLicenseServer","eventData","getSessionID","processClearKeyLicenseRequest","updateKeySession","serverURL","laURL","getLicenseServerUrlFromMediaInfo","psshData","getPSSHData","getLicenseServerURLFromInitData","getServerURLFromMessage","reqHeaders","updateHeaders","httpRequestHeaders","getRequestHeadersFromMessage","reportError","xhr","errorMsg","response","getErrorResponse","statusText","readyState","onLoad","licenseResponse","responseURL","parseHttpHeaders","getAllResponseHeaders","applyFilters","then","licenseMessage","getLicenseMessage","onAbort","onError","reqPayload","getLicenseRequestFromMessage","reqMethod","getHTTPMethod","getResponseType","isNaN","httpTimeout","licenseRequest","retryAttempts","streaming","doLicenseRequest","request","retriesCount","XMLHttpRequest","cmcd","enabled","Constants","cmcdParams","getQueryParameter","addAditionalQueryParameterToUrl","open","setRequestHeader","cmcdHeaders","getHeaderParameters","header","retryRequest","retryInterval","retryIntervals","onload","warn","ontimeout","onerror","onabort","LICENSE_REQUEST_SENDING","payload","send","retry","initDataType","abInitData","ArrayBuffer","isView","String","fromCharCode","Uint8Array","getSupportedKeySystems","filters","reduce","prev","next","Promise","initializeForMedia","mediaInfo","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_STATUS_CHANGED","getSupportedKeySystemsFromContentProtection","contentProtection","clearMediaInfoArrayByStreamId","streamId","streamInfo","id","removeKeySession","closeKeySession","setSessionType","setRobustnessLevel","level","setProtectionData","cps","getKeySystems","setKeySystems","keySystems","setLicenseRequestFilters","setLicenseResponseFilters","stop","reset","retryTimeout","getLogger","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory","KeyPair","keyID","ClearKeyKeySet","keyPairs","numKeys","jwk","kty","alg","kid","k","jwkString","buf","bView","CLEARKEY_KEYSTEM_STRING","WIDEVINE_KEYSTEM_STRING","PLAYREADY_KEYSTEM_STRING","ProtectionConstants","schemeIdURI","KeySystemClearKey","LICENSE_SERVER_MANIFEST_CONFIGURATIONS","attributes","prefixes","getInitData","cencContentProtection","parseInitDataFromContentProtection","cencDefaultKid","btoa","match","map","a","parseInt","cencDefaultKidToBase64Representation","parse","getCDMData","getSessionId","licenseServer","clearkeyProtData","j","ckData","attribute","prefix","__prefix","getClearKeysFromProtectionData","protectionData","clearkeySet","jsonMsg","clearkeyID","clearkey","getSingletonFactory","KeySystemW3CClearKey","KeySystemWidevine","KeySystemPlayReady","messageFormat","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","pro","prheader","setUint32","msg","xmlDoc","parser","DOMParser","dataview","Uint16Array","headerNameList","parseFromString","getElementsByTagName","headerValueList","childNodes","nodeValue","Content","Challenge","decode","numRecords","getUint16","recordType","recordLength","recordData","record","laurl","luiurl","customData","cdmDataBytes","setPlayReadyMessageFormat","format","DRMToday","license","keySystemStr","serverResponse","PlayReady","soap","uintToString","arrayBuffer","encodedString","decodeURIComponent","escape","parseServerResponse","stringResponse","envelope","getElementsByTagNameNS","body","parseErrorResponse","faultstring","statusCode","idStart","idEnd","fault","detail","exception","node","firstChild","errorString","Widevine","ClearKey","keypair","keyid","ProtectionKeyController","clearkeyKeySystem","clearkeyW3CKeySystem","context","initialize","getInstance","protectionDataSet","initData1","initData2","data1","data2","newKeySystems","getKeySystemBySystemString","cpIdx","findCencContentProtection","shouldNotFilterOutKeySystem","setConfig","protectionEvents","KEY_ADDED","KEY_ERROR","KEY_SESSION_CLOSED","KEY_SESSION_REMOVED","PROTECTION_CREATED","PROTECTION_DESTROYED","SERVER_CERTIFICATE_UPDATED","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","KEY_SESSION_UPDATED","NeedKey","KeyMessage","defaultURL","KeySystemAccess","ksConfiguration","ProtectionModel_21Jan2015","videoElement","mediaKeys","sessions","eventHandler","closeKeySessionInternal","session","removeEventListener","close","removeSession","token","parseKeyStatus","keyId","createSessionToken","handleEvent","keyStatuses","keyStatus","getExpirationTime","expiration","getKeyStatuses","getUsable","usable","addEventListener","closed","ksConfigurations","requestKeySystemAccessInternal","idx","navigator","requestMediaKeySystemAccess","mediaKeySystemAccess","configuration","getConfiguration","mksa","createMediaKeys","mkeys","setMediaKeys","mediaElement","createSession","dataType","generateRequest","toJWK","update","load","success","remove","numSessions","done","ProtectionModel_3Feb2014","api","needkey","ready","release","boundDoSetKeys","doSetKeys","found","supportedAudio","supportedVideo","configIdx","audios","videos","audioIdx","MediaKeys","isTypeSupported","videoIdx","ksConfig","ksAccess","capabilities","keySession","NaN","destinationURL","ProtectionModel_01b","pendingSessions","moreSessionsAllowed","errHandler","removeEventListeners","cancelKeyRequest","findSessionByID","sessionArray","keyerror","keymessage","keyadded","ve","document","createElement","canPlayType","newSession","generateKeyRequest","addKey","errorCode","systemCode","shift","APIS_ProtectionModel_01b","APIS_ProtectionModel_3Feb2014","Protection","getAPI","apis","createProtectionSystem","controller","videoModel","getElement","onencrypted","getProtectionModel","setEncryptedMediaSupported","ProtectionEvents","updateClassFactory"],"mappings":"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","file":"dash.protection.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"dashjs\"] = factory();\n\telse\n\t\troot[\"dashjs\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 71);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Constants declaration\n * @class\n * @ignore\n * @hideconstructor\n */\nclass Constants {\n\n    init() {\n        /**\n         *  @constant {string} STREAM Stream media type. Mainly used to report metrics relative to the full stream\n         *  @memberof Constants#\n         *  @static\n         */\n        this.STREAM = 'stream';\n\n        /**\n         *  @constant {string} VIDEO Video media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.VIDEO = 'video';\n\n        /**\n         *  @constant {string} AUDIO Audio media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.AUDIO = 'audio';\n\n        /**\n         *  @constant {string} TEXT Text media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TEXT = 'text';\n\n        /**\n         *  @constant {string} MUXED Muxed (video/audio in the same chunk) media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.MUXED = 'muxed';\n\n        /**\n         *  @constant {string} IMAGE Image media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.IMAGE = 'image';\n\n        /**\n         *  @constant {string} STPP STTP Subtitles format\n         *  @memberof Constants#\n         *  @static\n         */\n        this.STPP = 'stpp';\n\n        /**\n         *  @constant {string} TTML STTP Subtitles format\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TTML = 'ttml';\n\n        /**\n         *  @constant {string} VTT STTP Subtitles format\n         *  @memberof Constants#\n         *  @static\n         */\n        this.VTT = 'vtt';\n\n        /**\n         *  @constant {string} WVTT STTP Subtitles format\n         *  @memberof Constants#\n         *  @static\n         */\n        this.WVTT = 'wvtt';\n\n        /**\n         *  @constant {string} ABR_STRATEGY_DYNAMIC Dynamic Adaptive bitrate algorithm\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_STRATEGY_DYNAMIC = 'abrDynamic';\n\n        /**\n         *  @constant {string} ABR_STRATEGY_BOLA Adaptive bitrate algorithm based on Bola (buffer level)\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_STRATEGY_BOLA = 'abrBola';\n\n        /**\n         *  @constant {string} ABR_STRATEGY_L2A Adaptive bitrate algorithm based on L2A (online learning)\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_STRATEGY_L2A = 'abrL2A';\n\n        /**\n         *  @constant {string} ABR_STRATEGY_LoLP Adaptive bitrate algorithm based on LoL+\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_STRATEGY_LoLP = 'abrLoLP';\n\n        /**\n         *  @constant {string} ABR_STRATEGY_THROUGHPUT Adaptive bitrate algorithm based on throughput\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_STRATEGY_THROUGHPUT = 'abrThroughput';\n\n        /**\n         *  @constant {string} ABR_FETCH_THROUGHPUT_CALUCUALTION_DOWNLOADED_DATA Throughput calculation based on downloaded data array\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA = 'abrFetchThroughputCalculationDownloadedData';\n\n        /**\n         *  @constant {string} ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING Throughput calculation based on moof parsing\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING = 'abrFetchThroughputCalculationMoofParsing';\n\n        /**\n        *  @constant {string} ABR_FETCH_THROUGHPUT_CALCULATION_AAST Throughput calculation based on adjusted availability start time in low latency mode\n        *  @memberof Constants#\n        *  @static\n        */\n        this.ABR_FETCH_THROUGHPUT_CALCULATION_AAST = 'abrFetchThroughputCalculationAAST';\n\n        /**\n         *  @constant {string} LIVE_CATCHUP_MODE_DEFAULT Throughput calculation based on moof parsing\n         *  @memberof Constants#\n         *  @static\n         */\n        this.LIVE_CATCHUP_MODE_DEFAULT = 'liveCatchupModeDefault';\n\n        /**\n         *  @constant {string} LIVE_CATCHUP_MODE_LOLP Throughput calculation based on moof parsing\n         *  @memberof Constants#\n         *  @static\n         */\n        this.LIVE_CATCHUP_MODE_LOLP = 'liveCatchupModeLoLP';\n\n        /**\n         *  @constant {string} MOVING_AVERAGE_SLIDING_WINDOW Moving average sliding window\n         *  @memberof Constants#\n         *  @static\n         */\n        this.MOVING_AVERAGE_SLIDING_WINDOW = 'slidingWindow';\n\n        /**\n         *  @constant {string} EWMA Exponential moving average\n         *  @memberof Constants#\n         *  @static\n         */\n        this.MOVING_AVERAGE_EWMA = 'ewma';\n\n        /**\n         *  @constant {string} BAD_ARGUMENT_ERROR Invalid Arguments type of error\n         *  @memberof Constants#\n         *  @static\n         */\n        this.BAD_ARGUMENT_ERROR = 'Invalid Arguments';\n\n        /**\n         *  @constant {string} MISSING_CONFIG_ERROR Missing configuration parameters type of error\n         *  @memberof Constants#\n         *  @static\n         */\n        this.MISSING_CONFIG_ERROR = 'Missing config parameter(s)';\n\n        /**\n         *  @constant {string} TRACK_SWITCH_MODE_ALWAYS_REPLACE used to clear the buffered data (prior to current playback position) after track switch. Default for audio\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SWITCH_MODE_ALWAYS_REPLACE = 'alwaysReplace';\n\n        /**\n         *  @constant {string} TRACK_SWITCH_MODE_NEVER_REPLACE used to forbid clearing the buffered data (prior to current playback position) after track switch. Defers to fastSwitchEnabled for placement of new data. Default for video\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SWITCH_MODE_NEVER_REPLACE = 'neverReplace';\n\n        /**\n         *  @constant {string} TRACK_SELECTION_MODE_FIRST_TRACK makes the player select the first track found in the manifest.\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SELECTION_MODE_FIRST_TRACK = 'firstTrack';\n\n        /**\n         *  @constant {string} TRACK_SELECTION_MODE_HIGHEST_BITRATE makes the player select the track with a highest bitrate. This mode is a default mode.\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SELECTION_MODE_HIGHEST_BITRATE = 'highestBitrate';\n\n        /**\n         *  @constant {string} TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY makes the player select the track with the lowest bitrate per pixel average.\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY = 'highestEfficiency';\n\n        /**\n         *  @constant {string} TRACK_SELECTION_MODE_WIDEST_RANGE makes the player select the track with a widest range of bitrates.\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SELECTION_MODE_WIDEST_RANGE = 'widestRange';\n\n        /**\n         *  @constant {string} TRACK_SELECTION_MODE_WIDEST_RANGE makes the player select the track with the highest selectionPriority as defined in the manifest\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SELECTION_MODE_HIGHEST_SELECTION_PRIORITY = 'highestSelectionPriority';\n\n        /**\n         *  @constant {string} CMCD_MODE_QUERY specifies to attach CMCD metrics as query parameters.\n         *  @memberof Constants#\n         *  @static\n         */\n        this.CMCD_MODE_QUERY = 'query';\n\n        /**\n         *  @constant {string} CMCD_MODE_HEADER specifies to attach CMCD metrics as HTTP headers.\n         *  @memberof Constants#\n         *  @static\n         */\n        this.CMCD_MODE_HEADER = 'header';\n\n\n        this.LOCATION = 'Location';\n        this.INITIALIZE = 'initialize';\n        this.TEXT_SHOWING = 'showing';\n        this.TEXT_HIDDEN = 'hidden';\n        this.CC1 = 'CC1';\n        this.CC3 = 'CC3';\n        this.UTF8 = 'utf-8';\n        this.SCHEME_ID_URI = 'schemeIdUri';\n        this.START_TIME = 'starttime';\n        this.SERVICE_DESCRIPTION_LL_SCHEME = 'urn:dvb:dash:lowlatency:scope:2019';\n        this.SUPPLEMENTAL_PROPERTY_LL_SCHEME = 'urn:dvb:dash:lowlatency:critical:2019';\n        this.XML = 'XML';\n        this.ARRAY_BUFFER = 'ArrayBuffer';\n        this.DVB_REPORTING_URL = 'dvb:reportingUrl';\n        this.DVB_PROBABILITY = 'dvb:probability';\n        this.VIDEO_ELEMENT_READY_STATES = {\n            HAVE_NOTHING: 0,\n            HAVE_METADATA: 1,\n            HAVE_CURRENT_DATA: 2,\n            HAVE_FUTURE_DATA: 3,\n            HAVE_ENOUGH_DATA: 4\n        };\n    }\n\n    constructor() {\n        this.init();\n    }\n}\n\nconst constants = new Constants();\nexport default constants;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @class\n * @ignore\n */\n\nimport path from 'path-browserify'\n\nclass Utils {\n    static mixin(dest, source, copy) {\n        let s;\n        let empty = {};\n        if (dest) {\n            for (let name in source) {\n                if (source.hasOwnProperty(name)) {\n                    s = source[name];\n                    if (!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))) {\n                        if (typeof dest[name] === 'object' && dest[name] !== null) {\n                            dest[name] = Utils.mixin(dest[name], s, copy);\n                        } else {\n                            dest[name] = copy(s);\n                        }\n                    }\n                }\n            }\n        }\n        return dest;\n    }\n\n    static clone(src) {\n        if (!src || typeof src !== 'object') {\n            return src; // anything\n        }\n        let r;\n        if (src instanceof Array) {\n            // array\n            r = [];\n            for (let i = 0, l = src.length; i < l; ++i) {\n                if (i in src) {\n                    r.push(Utils.clone(src[i]));\n                }\n            }\n        } else {\n            r = {};\n        }\n        return Utils.mixin(r, src, Utils.clone);\n    }\n\n    static addAditionalQueryParameterToUrl(url, params) {\n        try {\n            if (!params || params.length === 0) {\n                return url;\n            }\n\n            let modifiedUrl = new URL(url);\n\n            params.forEach((param) => {\n                if (param.key && param.value) {\n                    modifiedUrl.searchParams.set(param.key, param.value);\n                }\n            });\n\n            return modifiedUrl.href;\n\n\n        } catch (e) {\n            return url;\n        }\n    }\n\n    static parseHttpHeaders(headerStr) {\n        let headers = {};\n        if (!headerStr) {\n            return headers;\n        }\n\n        // Trim headerStr to fix a MS Edge bug with xhr.getAllResponseHeaders method\n        // which send a string starting with a \"\\n\" character\n        let headerPairs = headerStr.trim().split('\\u000d\\u000a');\n        for (let i = 0, ilen = headerPairs.length; i < ilen; i++) {\n            let headerPair = headerPairs[i];\n            let index = headerPair.indexOf('\\u003a\\u0020');\n            if (index > 0) {\n                headers[headerPair.substring(0, index)] = headerPair.substring(index + 2);\n            }\n        }\n        return headers;\n    }\n\n    static generateUuid() {\n        let dt = new Date().getTime();\n        const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            const r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    static generateHashCode(string) {\n        let hash = 0;\n\n        if (string.length === 0) {\n            return hash;\n        }\n\n        for (let i = 0; i < string.length; i++) {\n            const chr = string.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0;\n        }\n        return hash;\n    }\n\n    /**\n     * Compares both urls and returns a relative url (target relative to original)\n     * @param {string} original\n     * @param {string} target\n     * @return {string|*}\n     */\n    static getRelativeUrl(originalUrl, targetUrl) {\n        try {\n            const original = new URL(originalUrl);\n            const target = new URL(targetUrl);\n\n            // Unify the protocol to compare the origins\n            original.protocol = target.protocol;\n            if (original.origin !== target.origin) {\n                return targetUrl;\n            }\n\n            // Use the relative path implementation of the path library. We need to cut off the actual filename in the end to get the relative path\n            let relativePath = path.relative(original.pathname.substr(0, original.pathname.lastIndexOf('/')), target.pathname.substr(0, target.pathname.lastIndexOf('/')));\n\n            // In case the relative path is empty (both path are equal) return the filename only. Otherwise add a slash in front of the filename\n            const startIndexOffset = relativePath.length === 0 ? 1 : 0;\n            relativePath += target.pathname.substr(target.pathname.lastIndexOf('/') + startIndexOffset, target.pathname.length - 1);\n\n            // Build the other candidate, e.g. the 'host relative' path that starts with \"/\", and return the shortest of the two candidates.\n            if (target.pathname.length < relativePath.length) {\n                return target.pathname;\n            }\n            return relativePath;\n        } catch (e) {\n            return targetUrl\n        }\n    }\n}\n\nexport default Utils;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass ErrorsBase {\n    extend (errors, config) {\n        if (!errors) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const err in errors) {\n            if (!errors.hasOwnProperty(err) || (this[err] && !override)) continue;\n            if (publicOnly && errors[err].indexOf('public_') === -1) continue;\n            this[err] = errors[err];\n\n        }\n    }\n}\n\nexport default ErrorsBase;","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc This Object holds reference to the HTTPRequest for manifest, fragment and xlink loading.\n * Members which are not defined in ISO23009-1 Annex D should be prefixed by a _ so that they are ignored\n * by Metrics Reporting code.\n * @ignore\n */\nclass HTTPRequest {\n    /**\n     * @class\n     */\n    constructor() {\n        /**\n         * Identifier of the TCP connection on which the HTTP request was sent.\n         * @public\n         */\n        this.tcpid = null;\n        /**\n         * This is an optional parameter and should not be included in HTTP request/response transactions for progressive download.\n         * The type of the request:\n         * - MPD\n         * - XLink expansion\n         * - Initialization Fragment\n         * - Index Fragment\n         * - Media Fragment\n         * - Bitstream Switching Fragment\n         * - other\n         * @public\n         */\n        this.type = null;\n        /**\n         * The original URL (before any redirects or failures)\n         * @public\n         */\n        this.url = null;\n        /**\n         * The actual URL requested, if different from above\n         * @public\n         */\n        this.actualurl = null;\n        /**\n         * The contents of the byte-range-spec part of the HTTP Range header.\n         * @public\n         */\n        this.range = null;\n        /**\n         * Real-Time | The real time at which the request was sent.\n         * @public\n         */\n        this.trequest = null;\n        /**\n         * Real-Time | The real time at which the first byte of the response was received.\n         * @public\n         */\n        this.tresponse = null;\n        /**\n         * The HTTP response code.\n         * @public\n         */\n        this.responsecode = null;\n        /**\n         * The duration of the throughput trace intervals (ms), for successful requests only.\n         * @public\n         */\n        this.interval = null;\n        /**\n         * Throughput traces, for successful requests only.\n         * @public\n         */\n        this.trace = [];\n\n        /**\n         * Type of stream (\"audio\" | \"video\" etc..)\n         * @public\n         */\n        this._stream = null;\n        /**\n         * Real-Time | The real time at which the request finished.\n         * @public\n         */\n        this._tfinish = null;\n        /**\n         * The duration of the media requests, if available, in seconds.\n         * @public\n         */\n        this._mediaduration = null;\n        /**\n         * The media segment quality\n         * @public\n         */\n        this._quality = null;\n        /**\n         * all the response headers from request.\n         * @public\n         */\n        this._responseHeaders = null;\n        /**\n         * The selected service location for the request. string.\n         * @public\n         */\n        this._serviceLocation = null;\n    }\n}\n\n/**\n * @classdesc This Object holds reference to the progress of the HTTPRequest.\n * @ignore\n */\nclass HTTPRequestTrace {\n    /**\n    * @class\n    */\n    constructor() {\n        /**\n         * Real-Time | Measurement stream start.\n         * @public\n         */\n        this.s = null;\n        /**\n         * Measurement stream duration (ms).\n         * @public\n         */\n        this.d = null;\n        /**\n         * List of integers counting the bytes received in each trace interval within the measurement stream.\n         * @public\n         */\n        this.b = [];\n        /**\n         * Measurement throughput in kbits/s\n         * @public\n         */\n         this.t = null;\n    }\n}\n\nHTTPRequest.GET = 'GET';\nHTTPRequest.HEAD = 'HEAD';\nHTTPRequest.MPD_TYPE = 'MPD';\nHTTPRequest.XLINK_EXPANSION_TYPE = 'XLinkExpansion';\nHTTPRequest.INIT_SEGMENT_TYPE = 'InitializationSegment';\nHTTPRequest.INDEX_SEGMENT_TYPE = 'IndexSegment';\nHTTPRequest.MEDIA_SEGMENT_TYPE = 'MediaSegment';\nHTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE = 'BitstreamSwitchingSegment';\nHTTPRequest.MSS_FRAGMENT_INFO_SEGMENT_TYPE = 'FragmentInfoSegment';\nHTTPRequest.LICENSE = 'license';\nHTTPRequest.OTHER_TYPE = 'other';\n\nexport { HTTPRequest, HTTPRequestTrace };\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @class\n * @ignore\n */\nclass CommonEncryption {\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param {Array} cpArray array of content protection elements\n     * @returns {Object|null} the Common Encryption content protection element or\n     * null if one was not found\n     */\n    static findCencContentProtection(cpArray) {\n        let retVal = null;\n        for (let i = 0; i < cpArray.length; ++i) {\n            let cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\n                (cp.value.toLowerCase() === 'cenc' || cp.value.toLowerCase() === 'cbcs'))\n                retVal = cp;\n        }\n        return retVal;\n    }\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param {ArrayBuffer} pssh - the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    static getPSSHData(pssh) {\n        let offset = 8; // Box size and type fields\n        let view = new DataView(pssh);\n\n        // Read version\n        let version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    }\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n     * or null if a valid association could not be found.\n     */\n    static getPSSHForKeySystem(keySystem, initData) {\n        let psshList = CommonEncryption.parsePSSHList(initData);\n        if (keySystem && psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    }\n\n    /**\n     * Parse a standard common encryption PSSH which contains a simple\n     * base64-encoding of the init data\n     *\n     * @param {Object} cpData the ContentProtection element\n     * @param {BASE64} BASE64 reference\n     * @returns {ArrayBuffer|null} the init data or null if not found\n     */\n    static parseInitDataFromContentProtection(cpData, BASE64) {\n        if ('pssh' in cpData) {\n\n            // Remove whitespaces and newlines from pssh text\n            cpData.pssh.__text = cpData.pssh.__text.replace(/\\r?\\n|\\r/g, '').replace(/\\s+/g, '');\n\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    }\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {Object|Array} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    static parsePSSHList(data) {\n\n        if (data === null || data === undefined)\n            return [];\n\n        let dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\n        let done = false;\n        let pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        let byteCursor = 0;\n        while (!done) {\n\n            let size,\n                nextBox,\n                version,\n                systemID;\n            let boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            let i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    }\n}\n\nexport default CommonEncryption;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc A media capability\n * @ignore\n */\nclass MediaCapability {\n    /**\n     * @param {string} contentType MIME type and codecs (RFC6386)\n     * @param {string} robustness\n     * @class\n     * @ignore\n     */\n    constructor(contentType, robustness) {\n        this.contentType = contentType;\n        this.robustness = robustness;\n    }\n}\n\nexport default MediaCapability;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc Represents a set of configurations that describe the capabilities desired for\n *  support by a given CDM\n * @ignore\n */\nclass KeySystemConfiguration {\n    /**\n     * @param {Array.<MediaCapability>} audioCapabilities array of\n     * desired audio capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {Array.<MediaCapability>} videoCapabilities array of\n     * desired video capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.\n     * One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {string} persistentState desired support for persistent storage of\n     * key systems.  One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {Array.<string>} sessionTypes List of session types that must\n     * be supported by the key system\n     * @class\n     */\n    constructor(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\n        this.initDataTypes = [ 'cenc' ];\n        if (audioCapabilities && audioCapabilities.length) {\n            this.audioCapabilities = audioCapabilities;\n        }\n        if (videoCapabilities && videoCapabilities.length) {\n            this.videoCapabilities = videoCapabilities;\n        }\n        this.distinctiveIdentifier = distinctiveIdentifier;\n        this.persistentState = persistentState;\n        this.sessionTypes = sessionTypes;\n    }\n}\n\nexport default KeySystemConfiguration;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ErrorsBase from '../../../core/errors/ErrorsBase';\n/**\n * @class\n */\nclass ProtectionErrors extends ErrorsBase {\n\tconstructor () {\n        super();\n\n        /**\n         *  Generid key Error code\n         */\n        this.MEDIA_KEYERR_CODE = 100;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_UNKNOWN_CODE = 101;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_CLIENT_CODE = 102;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_SERVICE_CODE = 103;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_OUTPUT_CODE = 104;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_HARDWARECHANGE_CODE = 105;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_DOMAIN_CODE = 106;\n\n        /**\n         *  Error code returned when an error occured in keymessage event for ProtectionModel_01b\n         */\n        this.MEDIA_KEY_MESSAGE_ERROR_CODE = 107;\n        /**\n         *  Error code returned when challenge is invalid in keymessage event (event triggered by CDM)\n         */\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE = 108;\n        /**\n         *  Error code returned when License server certificate has not been successfully updated\n         */\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_CODE = 109;\n        /**\n         *  Error code returned when license validity has expired\n         */\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE = 110;\n        /**\n         *  Error code returned when no licenser url is defined\n         */\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE = 111;\n        /**\n         *  Error code returned when key system access is denied\n         */\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE = 112;\n        /**\n         *  Error code returned when key session has not been successfully created\n         */\n        this.KEY_SESSION_CREATED_ERROR_CODE = 113;\n        /**\n         *  Error code returned when license request failed after a keymessage event has been triggered\n         */\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE = 114;\n\n        this.MEDIA_KEYERR_UNKNOWN_MESSAGE = 'An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\n        this.MEDIA_KEYERR_CLIENT_MESSAGE = 'The Key System could not be installed or updated.';\n        this.MEDIA_KEYERR_SERVICE_MESSAGE = 'The message passed into update indicated an error from the license service.';\n        this.MEDIA_KEYERR_OUTPUT_MESSAGE = 'There is no available output device with the required characteristics for the content protection system.';\n        this.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE = 'A hardware configuration change caused a content protection error.';\n        this.MEDIA_KEYERR_DOMAIN_MESSAGE = 'An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\n        this.MEDIA_KEY_MESSAGE_ERROR_MESSAGE = 'Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!';\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE = 'DRM: Empty key message from CDM';\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE = 'Error updating server certificate -- ';\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE = 'DRM: KeyStatusChange error! -- License has expired';\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE = 'DRM: No license server URL specified!';\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE = 'DRM: KeySystem Access Denied! -- ';\n        this.KEY_SESSION_CREATED_ERROR_MESSAGE = 'DRM: unable to create session! --';\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE = 'DRM: licenser error! --';\n    }\n}\n\nlet protectionErrors = new ProtectionErrors();\nexport default protectionErrors;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Defines a license request\n * @ignore\n */\nclass LicenseRequest {\n    /**\n     * Defines a license request\n     *\n     * @class\n     */\n    constructor(url, method, responseType, headers, withCredentials, messageType, sessionId, data) {\n\n        /**\n         * The license request url\n         */\n        this.url = url;\n\n        /**\n         * The HTTP method\n         */\n        this.method = method;\n\n        /**\n         * The HTTP response type\n         */\n        this.responseType = responseType;\n\n        /**\n         * The HTP request headers\n         */\n        this.headers = headers;\n\n        /**\n         * Wether request is done using credentials (cross-site cookies)\n         */\n        this.withCredentials = withCredentials;\n\n        /**\n         * The license request message type (see https://www.w3.org/TR/encrypted-media/#dom-mediakeymessagetype)\n         */\n        this.messageType = messageType;\n\n        /**\n         * The corresponding EME session ID\n         */\n        this.sessionId = sessionId;\n\n        /**\n         * The license request data\n         */\n        this.data = data;\n    }\n}\n\nexport default LicenseRequest;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Defines a license response\n */\nclass LicenseResponse {\n    /**\n     * Defines a license request\n     *\n     * @class\n     * @ignore\n     */\n    constructor(url, headers, data) {\n\n        /**\n         * The url that was loaded, that can be redirected from original request url\n         */\n        this.url = url;\n\n        /**\n         * The HTP response headers\n         */\n        this.headers = headers;\n\n        /**\n         * The license response data\n         */\n        this.data = data;\n    }\n}\n\nexport default LicenseResponse;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport MediaCapability from '../vo/MediaCapability';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport DashJSError from '../../vo/DashJSError';\nimport LicenseRequest from '../vo/LicenseRequest';\nimport LicenseResponse from '../vo/LicenseResponse';\nimport {HTTPRequest} from '../../vo/metrics/HTTPRequest';\nimport Utils from '../../../core/Utils';\nimport Constants from '../../constants/Constants';\n\nconst NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;\nconst NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;\n\nconst LICENSE_SERVER_REQUEST_RETRIES = 3;\nconst LICENSE_SERVER_REQUEST_RETRY_INTERVAL = 1000;\nconst LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT = 8000;\n\n/**\n * @module ProtectionController\n * @description Provides access to media protection information and functionality.  Each\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\n * which encapsulates a set of protection information (EME APIs, selected key system,\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\n * functionality provided in {@link ProtectionKeyController}.\n * @todo ProtectionController does almost all of its tasks automatically after init() is\n * called.  Applications might want more control over this process and want to go through\n * each step manually (key system selection, session creation, session maintenance).\n * This module can be accessed using the MediaPlayer API getProtectionController()\n * @param {Object} config\n */\n\nfunction ProtectionController(config) {\n\n    config = config || {};\n    const protectionKeyController = config.protectionKeyController;\n    let protectionModel = config.protectionModel;\n    const eventBus = config.eventBus;\n    const events = config.events;\n    const debug = config.debug;\n    const BASE64 = config.BASE64;\n    const constants = config.constants;\n    let needkeyRetries = [];\n    const cmcdModel = config.cmcdModel;\n    const settings = config.settings;\n\n    let instance,\n        logger,\n        pendingNeedKeyData,\n        mediaInfoArr,\n        protDataSet,\n        sessionType,\n        robustnessLevel,\n        keySystem,\n        licenseRequestFilters,\n        licenseResponseFilters;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        pendingNeedKeyData = [];\n        mediaInfoArr = [];\n        sessionType = 'temporary';\n        robustnessLevel = '';\n        licenseRequestFilters = [];\n        licenseResponseFilters = [];\n    }\n\n    function checkConfig() {\n        if (!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    /**\n     * Initialize this protection system with a given audio\n     * or video stream information.\n     *\n     * @param {StreamInfo} [mediaInfo] Media information\n     * @memberof module:ProtectionController\n     * @instance\n     * @todo This API will change when we have better support for allowing applications\n     * to select different adaptation sets for playback.  Right now it is clunky for\n     * applications to create {@link StreamInfo} with the right information,\n     * @ignore\n     */\n    function initializeForMedia(mediaInfo) {\n        // Not checking here if a session for similar KS/KID combination is already created\n        // because still don't know which keysystem will be selected.\n        // Once Keysystem is selected and before creating the session, we will do that check\n        // so we create the strictly necessary DRM sessions\n        if (!mediaInfo) {\n            throw new Error('mediaInfo can not be null or undefined');\n        }\n\n        checkConfig();\n\n        eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n        mediaInfoArr.push(mediaInfo);\n\n        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\n        // and video will be the same.  Just use one valid MediaInfo object\n        const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\n        if (supportedKS && supportedKS.length > 0) {\n            selectKeySystem(supportedKS, true);\n        }\n    }\n\n    /**\n     * Removes all entries from the mediaInfoArr array for a specific stream id\n     * @param {String} streamId\n     */\n    function clearMediaInfoArrayByStreamId(streamId) {\n        mediaInfoArr = mediaInfoArr.filter((mediaInfo) => {\n            return mediaInfo.streamInfo.id !== streamId;\n        });\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     * @ignore\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        checkConfig();\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\n    }\n\n    /**\n     * Create a new key session associated with the given initialization data from\n     * the MPD or from the PSSH box in the media\n     *\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\n     * to come up to speed with the latest EME standard\n     * @ignore\n     */\n    function createKeySession(initData, cdmData) {\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\n        const protData = getProtData(keySystem);\n        if (initDataForKS) {\n\n            // Check for duplicate initData\n            if (_isInitDataDuplicate(initDataForKS)) {\n                return;\n            }\n\n            try {\n                protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);\n            } catch (error) {\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\n                    data: null,\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + error.message)\n                });\n            }\n        } else if (initData) {\n            protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);\n        } else {\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\n                data: null,\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Selected key system is ' + (keySystem ? keySystem.systemString : null) + '.  needkey/encrypted event contains no initData corresponding to that key system!')\n            });\n        }\n    }\n\n    /**\n     * Checks if the provided init data is equal to one of the existing init data values\n     * @param {any} initDataForKS\n     * @return {boolean}\n     * @private\n     */\n    function _isInitDataDuplicate(initDataForKS) {\n\n        if (!initDataForKS) {\n            return false;\n        }\n\n        try {\n            const currentInitData = protectionModel.getAllInitData();\n            for (let i = 0; i < currentInitData.length; i++) {\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                    logger.debug('DRM: Ignoring initData because we have already seen it!');\n                    return true;\n                }\n            }\n\n            return false;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Loads a key session with the given session ID from persistent storage.  This\n     * essentially creates a new key session\n     *\n     * @param {string} sessionID\n     * @param {string} initData\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @ignore\n     */\n    function loadKeySession(sessionID, initData) {\n        checkConfig();\n        protectionModel.loadKeySession(sessionID, initData, getSessionType(keySystem));\n    }\n\n    /**\n     * Removes the given key session from persistent storage and closes the session\n     * as if {@link ProtectionController#closeKeySession}\n     * was called\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionRemoved\n     * @fires ProtectionController#KeySessionClosed\n     * @ignore\n     */\n    function removeKeySession(sessionToken) {\n        checkConfig();\n        protectionModel.removeKeySession(sessionToken);\n    }\n\n    /**\n     * Closes the key session and releases all associated decryption keys.  These\n     * keys will no longer be available for decrypting media\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionClosed\n     * @ignore\n     */\n    function closeKeySession(sessionToken) {\n        checkConfig();\n        protectionModel.closeKeySession(sessionToken);\n    }\n\n    /**\n     * Sets a server certificate for use by the CDM when signing key messages\n     * intended for a particular license server.  This will fire\n     * an error event if a key system has not yet been selected.\n     *\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\n     * certificate\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#ServerCertificateUpdated\n     */\n    function setServerCertificate(serverCertificate) {\n        checkConfig();\n        protectionModel.setServerCertificate(serverCertificate);\n    }\n\n    /**\n     * Associate this protection system with the given HTMLMediaElement.  This\n     * causes the system to register for needkey/encrypted events from the given\n     * element and provides a destination for setting of MediaKeys\n     *\n     * @param {HTMLMediaElement} element the media element to which the protection\n     * system should be associated\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setMediaElement(element) {\n        checkConfig();\n        if (element) {\n            protectionModel.setMediaElement(element);\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\n        } else if (element === null) {\n            protectionModel.setMediaElement(element);\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\n        }\n    }\n\n    /**\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\n     * \"persistent-license\".  Default is \"temporary\".\n     *\n     * @param {string} value the session type\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setSessionType(value) {\n        sessionType = value;\n    }\n\n    /**\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\n     *\n     * @param {string} level the robustness level\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setRobustnessLevel(level) {\n        robustnessLevel = level;\n    }\n\n    /**\n     * Attach KeySystem-specific data to use for license acquisition with EME\n     *\n     * @param {Object} data an object containing property names corresponding to\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\n     * being instances of {@link ProtectionData}\n     * @memberof module:ProtectionController\n     * @instance\n     * @ignore\n     */\n    function setProtectionData(data) {\n        protDataSet = data;\n        protectionKeyController.setProtectionData(data);\n    }\n\n    /**\n     * Stop method is called when current playback is stopped/resetted.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function stop() {\n        if (protectionModel) {\n            protectionModel.stop();\n        }\n    }\n\n\n    /**\n     * Destroys all protection data associated with this protection set.  This includes\n     * deleting all key sessions. In the case of persistent key sessions, the sessions\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\n     * associated with a HTMLMediaElement, it will be detached from that element.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     * @ignore\n     */\n    function reset() {\n        checkConfig();\n\n        licenseRequestFilters = [];\n        licenseResponseFilters = [];\n\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n\n        setMediaElement(null);\n\n        keySystem = undefined;\n\n        if (protectionModel) {\n            protectionModel.reset();\n            protectionModel = null;\n        }\n\n        needkeyRetries.forEach(retryTimeout => clearTimeout(retryTimeout));\n        needkeyRetries = [];\n\n        mediaInfoArr = [];\n    }\n\n    ///////////////\n    // Private\n    ///////////////\n\n    function getProtData(keySystem) {\n        let protData = null;\n        if (keySystem) {\n            const keySystemString = keySystem.systemString;\n\n            if (protDataSet) {\n                protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\n            }\n        }\n        return protData;\n    }\n\n    function getKeySystemConfiguration(keySystem) {\n        const protData = getProtData(keySystem);\n        const audioCapabilities = [];\n        const videoCapabilities = [];\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\n        const ksSessionType = getSessionType(keySystem);\n        const distinctiveIdentifier = (protData && protData.distinctiveIdentifier) ? protData.distinctiveIdentifier : 'optional';\n        const persistentState = (protData && protData.persistentState) ? protData.persistentState : (ksSessionType === 'temporary') ? 'optional' : 'required';\n\n        mediaInfoArr.forEach((media) => {\n            if (media.type === constants.AUDIO) {\n                audioCapabilities.push(new MediaCapability(media.codec, audioRobustness));\n            } else if (media.type === constants.VIDEO) {\n                videoCapabilities.push(new MediaCapability(media.codec, videoRobustness));\n            }\n        });\n\n        return new KeySystemConfiguration(\n            audioCapabilities, videoCapabilities, distinctiveIdentifier,\n            persistentState,\n            [ksSessionType]);\n    }\n\n    function getSessionType(keySystem) {\n        const protData = getProtData(keySystem);\n        const ksSessionType = (protData && protData.sessionType) ? protData.sessionType : sessionType;\n        return ksSessionType;\n    }\n\n    function selectKeySystem(supportedKS, fromManifest) {\n\n        // Reorder key systems according to priority order provided in protectionData\n        supportedKS = supportedKS.sort((ksA, ksB) => {\n            let indexA = (protDataSet && protDataSet[ksA.ks.systemString] && protDataSet[ksA.ks.systemString].priority >= 0) ? protDataSet[ksA.ks.systemString].priority : supportedKS.length;\n            let indexB = (protDataSet && protDataSet[ksB.ks.systemString] && protDataSet[ksB.ks.systemString].priority >= 0) ? protDataSet[ksB.ks.systemString].priority : supportedKS.length;\n            return indexA - indexB;\n        });\n\n\n        // First time, so we need to select a key system\n        if (keySystem === undefined) {\n            _selectInitialKeySystem(supportedKS, fromManifest);\n        }\n\n        // We already selected a key system. we only need to trigger a new license exchange if the init data has changed\n        else if (keySystem) {\n            _selectWithExistingKeySystem(supportedKS, fromManifest);\n        }\n\n        // We are in the process of selecting a key system, so just save the data which might be coming from additional AdaptationSets.\n        else {\n            pendingNeedKeyData.push(supportedKS);\n        }\n    }\n\n    function _selectWithExistingKeySystem(supportedKS, fromManifest) {\n        const self = this;\n        const requestedKeySystems = [];\n\n        const ksIdx = supportedKS.findIndex((entry) => {\n            return entry.ks === keySystem;\n        });\n\n        if (ksIdx === -1 || !supportedKS[ksIdx].initData) {\n            return;\n        }\n\n        //  we only need to call this if the init data has changed\n        const initDataForKs = CommonEncryption.getPSSHForKeySystem(keySystem, supportedKS[ksIdx].initData);\n        if (_isInitDataDuplicate(initDataForKs)) {\n            return;\n        }\n\n        requestedKeySystems.push({\n            ks: supportedKS[ksIdx].ks,\n            configs: [getKeySystemConfiguration(keySystem)]\n        });\n\n        // Ensure that we would be granted key system access using the key\n        // system and codec information\n        const onKeySystemAccessComplete = function (event) {\n            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            if (event.error) {\n                if (!fromManifest) {\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, { error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error) });\n                }\n            } else {\n                logger.info('DRM: KeySystem Access Granted');\n                eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: event.data });\n                const protData = getProtData(keySystem);\n                if (protectionKeyController.isClearKey(keySystem)) {\n                    // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\n                    // initData and overwrite possible initData indicated in encrypted event (EME)\n                    if (protData && protData.hasOwnProperty('clearkeys')) {\n                        const initData = { kids: Object.keys(protData.clearkeys) };\n                        supportedKS[ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\n                    }\n                }\n                if (supportedKS[ksIdx].sessionId) {\n                    // Load MediaKeySession with sessionId\n                    loadKeySession(supportedKS[ksIdx].sessionId, supportedKS[ksIdx].initData);\n                } else if (supportedKS[ksIdx].initData) {\n                    // Create new MediaKeySession with initData\n                    createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\n                }\n            }\n        };\n\n        eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n        protectionModel.requestKeySystemAccess(requestedKeySystems);\n    }\n\n    function _selectInitialKeySystem(supportedKS, fromManifest) {\n        const self = this;\n        const requestedKeySystems = [];\n        let ksIdx;\n\n        // First time through, so we need to select a key system\n        keySystem = null;\n        pendingNeedKeyData.push(supportedKS);\n\n        // Add all key systems to our request list since we have yet to select a key system\n        for (let i = 0; i < supportedKS.length; i++) {\n            requestedKeySystems.push({\n                ks: supportedKS[i].ks,\n                configs: [getKeySystemConfiguration(supportedKS[i].ks)]\n            });\n        }\n\n        let keySystemAccess;\n        const onKeySystemAccessComplete = function (event) {\n            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            if (event.error) {\n                keySystem = undefined;\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                if (!fromManifest) {\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\n                        data: null,\n                        error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)\n                    });\n                }\n            } else {\n                keySystemAccess = event.data;\n                logger.info('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\n                protectionModel.selectKeySystem(keySystemAccess);\n            }\n        };\n        var onKeySystemSelected = function (event) {\n            eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            if (!event.error) {\n                if (!protectionModel) {\n                    return;\n                }\n                keySystem = protectionModel.getKeySystem();\n                eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: keySystemAccess });\n                // Set server certificate from protData\n                const protData = getProtData(keySystem);\n                if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\n                    protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\n                }\n\n                // Create key session for the remaining AdaptationSets which have been added to pendingNeedKeyData\n                for (let i = 0; i < pendingNeedKeyData.length; i++) {\n                    for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                        if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\n                            if (protectionKeyController.isClearKey(keySystem)) {\n                                // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\n                                // initData and overwrite possible initData indicated in encrypted event (EME)\n                                if (protData && protData.hasOwnProperty('clearkeys')) {\n                                    const initData = { kids: Object.keys(protData.clearkeys) };\n                                    pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\n                                }\n                            }\n                            if (pendingNeedKeyData[i][ksIdx].sessionId) {\n                                // Load MediaKeySession with sessionId\n                                loadKeySession(pendingNeedKeyData[i][ksIdx].sessionId, pendingNeedKeyData[i][ksIdx].initData);\n                            } else if (pendingNeedKeyData[i][ksIdx].initData !== null) {\n                                // Create new MediaKeySession with initData\n                                createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } else {\n                keySystem = undefined;\n                if (!fromManifest) {\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\n                        data: null,\n                        error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + 'Error selecting key system! -- ' + event.error)\n                    });\n                }\n            }\n        };\n\n        eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n        eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n        protectionModel.requestKeySystemAccess(requestedKeySystems);\n    }\n\n    function sendLicenseRequestCompleteEvent(data, error) {\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, { data: data, error: error });\n    }\n\n    function onKeyStatusChanged(e) {\n        if (e.error) {\n            eventBus.trigger(events.KEY_STATUSES_CHANGED, { data: null, error: e.error });\n        } else {\n            logger.debug('DRM: key status = ' + e.status);\n        }\n    }\n\n    function onKeyMessage(e) {\n        logger.debug('DRM: onKeyMessage');\n\n        // Dispatch event to applications indicating we received a key message\n        const keyMessage = e.data;\n        eventBus.trigger(events.KEY_MESSAGE, { data: keyMessage });\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\n        const message = keyMessage.message;\n        const sessionToken = keyMessage.sessionToken;\n        const protData = getProtData(keySystem);\n        const keySystemString = keySystem ? keySystem.systemString : null;\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\n\n        // Ensure message from CDM is not empty\n        if (!message || message.byteLength === 0) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));\n            return;\n        }\n\n        // Message not destined for license server\n        if (!licenseServerData) {\n            logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\n            sendLicenseRequestCompleteEvent(eventData);\n            return;\n        }\n\n        // Perform any special handling for ClearKey\n        if (protectionKeyController.isClearKey(keySystem)) {\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);\n            if (clearkeys) {\n                logger.debug('DRM: ClearKey license request handled by application!');\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken, clearkeys);\n                return;\n            }\n        }\n\n        // All remaining key system scenarios require a request to a remote license server\n        // Determine license server URL\n        let url = null;\n        if (protData && protData.serverURL) {\n            const serverURL = protData.serverURL;\n            if (typeof serverURL === 'string' && serverURL !== '') {\n                url = serverURL;\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\n                url = serverURL[messageType];\n            }\n        } else if (protData && protData.laURL && protData.laURL !== '') {\n            // TODO: Deprecated!\n            url = protData.laURL;\n        } else {\n            // For clearkey use the url defined in the manifest\n            if (protectionKeyController.isClearKey(keySystem)) {\n                url = keySystem.getLicenseServerUrlFromMediaInfo(mediaInfoArr);\n            } else {\n                const psshData = CommonEncryption.getPSSHData(sessionToken.initData);\n                url = keySystem.getLicenseServerURLFromInitData(psshData);\n                if (!url) {\n                    url = e.data.laURL;\n                }\n            }\n        }\n        // Possibly update or override the URL based on the message\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\n\n        // Ensure valid license server URL\n        if (!url) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));\n            return;\n        }\n\n        // Set optional XMLHttpRequest headers from protection data and message\n        const reqHeaders = {};\n        let withCredentials = false;\n        const updateHeaders = function (headers) {\n            if (headers) {\n                for (const key in headers) {\n                    if ('authorization' === key.toLowerCase()) {\n                        withCredentials = true;\n                    }\n                    reqHeaders[key] = headers[key];\n                }\n            }\n        };\n        if (protData) {\n            updateHeaders(protData.httpRequestHeaders);\n        }\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\n\n        // Overwrite withCredentials property from protData if present\n        if (protData && typeof protData.withCredentials == 'boolean') {\n            withCredentials = protData.withCredentials;\n        }\n\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg));\n        };\n\n        const onLoad = function (xhr) {\n            if (!protectionModel) {\n                return;\n            }\n\n            if (xhr.status >= 200 && xhr.status <= 299) {\n                let licenseResponse = new LicenseResponse(xhr.responseURL, Utils.parseHttpHeaders(xhr.getAllResponseHeaders ? xhr.getAllResponseHeaders() : null), xhr.response);\n                applyFilters(licenseResponseFilters, licenseResponse).then(() => {\n                    const licenseMessage = licenseServerData.getLicenseMessage(licenseResponse.data, keySystemString, messageType);\n                    if (licenseMessage !== null) {\n                        sendLicenseRequestCompleteEvent(eventData);\n                        protectionModel.updateKeySession(sessionToken, licenseMessage);\n                    } else {\n                        reportError(xhr, eventData, keySystemString, messageType);\n                    }\n                });\n            } else {\n                reportError(xhr, eventData, keySystemString, messageType);\n            }\n        };\n\n        const onAbort = function (xhr) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\n        };\n\n        const onError = function (xhr) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\n        };\n\n        const reqPayload = keySystem.getLicenseRequestFromMessage(message);\n        const reqMethod = licenseServerData.getHTTPMethod(messageType);\n        const responseType = licenseServerData.getResponseType(keySystemString, messageType);\n        const timeout = protData && !isNaN(protData.httpTimeout) ? protData.httpTimeout : LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;\n        const sessionId = sessionToken.getSessionID() || null;\n\n        let licenseRequest = new LicenseRequest(url, reqMethod, responseType, reqHeaders, withCredentials, messageType, sessionId, reqPayload);\n        const retryAttempts = !isNaN(settings.get().streaming.retryAttempts[HTTPRequest.LICENSE]) ? settings.get().streaming.retryAttempts[HTTPRequest.LICENSE] : LICENSE_SERVER_REQUEST_RETRIES;\n            applyFilters(licenseRequestFilters, licenseRequest).then(() => {\n                doLicenseRequest(licenseRequest, retryAttempts, timeout, onLoad, onAbort, onError);\n            });\n    }\n\n    // Implement license requests with a retry mechanism to avoid temporary network issues to affect playback experience\n    function doLicenseRequest(request, retriesCount, timeout, onLoad, onAbort, onError) {\n        const xhr = new XMLHttpRequest();\n\n        if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\n            const cmcdMode = settings.get().streaming.cmcd.mode;\n            if (cmcdMode === Constants.CMCD_MODE_QUERY) {\n                const cmcdParams = cmcdModel.getQueryParameter({\n                    url: request.url,\n                    type: HTTPRequest.LICENSE\n                });\n\n                if (cmcdParams) {\n                    request.url = Utils.addAditionalQueryParameterToUrl(request.url, [cmcdParams]);\n                }\n            }\n        }\n\n        xhr.open(request.method, request.url, true);\n        xhr.responseType = request.responseType;\n        xhr.withCredentials = request.withCredentials;\n        if (timeout > 0) {\n            xhr.timeout = timeout;\n        }\n        for (const key in request.headers) {\n            xhr.setRequestHeader(key, request.headers[key]);\n        }\n\n        if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\n            const cmcdMode = settings.get().streaming.cmcd.mode;\n            if (cmcdMode === Constants.CMCD_MODE_HEADER) {\n                const cmcdHeaders = cmcdModel.getHeaderParameters({\n                    url: request.url,\n                    type: HTTPRequest.LICENSE\n                });\n\n                if (cmcdHeaders) {\n                    for (const header in cmcdHeaders) {\n                        let value = cmcdHeaders[header];\n                        if (value) {\n                            xhr.setRequestHeader(header, value);\n                        }\n                    }\n                }\n            }\n        }\n\n        const retryRequest = function () {\n            // fail silently and retry\n            retriesCount--;\n            const retryInterval = !isNaN(settings.get().streaming.retryIntervals[HTTPRequest.LICENSE]) ? settings.get().streaming.retryIntervals[HTTPRequest.LICENSE] : LICENSE_SERVER_REQUEST_RETRY_INTERVAL;\n            setTimeout(function () {\n                doLicenseRequest(request, retriesCount, timeout, onLoad, onAbort, onError);\n            }, retryInterval);\n        };\n\n        xhr.onload = function () {\n            if (this.status >= 200 && this.status <= 299 || retriesCount <= 0) {\n                onLoad(this);\n            } else {\n                logger.warn('License request failed (' + this.status + '). Retrying it... Pending retries: ' + retriesCount);\n                retryRequest();\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function () {\n            if (retriesCount <= 0) {\n                onError(this);\n            } else {\n                logger.warn('License request network request failed . Retrying it... Pending retries: ' + retriesCount);\n                retryRequest();\n            }\n        };\n\n        xhr.onabort = function () {\n            onAbort(this);\n        };\n\n        // deprecated, to be removed\n        eventBus.trigger(events.LICENSE_REQUEST_SENDING, {\n            url: request.url,\n            headers: request.headers,\n            payload: request.data,\n            sessionId: request.sessionId\n        });\n\n        xhr.send(request.data);\n    }\n\n    function onNeedKey(event, retry) {\n        logger.debug('DRM: onNeedKey');\n        // Ignore non-cenc initData\n        if (event.key.initDataType !== 'cenc') {\n            logger.warn('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\n            return;\n        }\n\n        if (mediaInfoArr.length === 0) {\n            logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');\n            retry = typeof retry === 'undefined' ? 1 : retry + 1;\n            if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {\n                needkeyRetries.push(setTimeout(() => {\n                    onNeedKey(event, retry);\n                }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));\n                return;\n            }\n\n        }\n\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\n        // Convert to ArrayBuffer\n        let abInitData = event.key.initData;\n        if (ArrayBuffer.isView(abInitData)) {\n            abInitData = abInitData.buffer;\n        }\n\n        // If key system has already been selected and initData already seen, then do nothing\n        if (keySystem) {\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\n            if (initDataForKS) {\n\n                // Check for duplicate initData\n                if (_isInitDataDuplicate(initDataForKS)) {\n                    return;\n                }\n            }\n        }\n\n        logger.debug('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\n\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\n        if (supportedKS.length === 0) {\n            logger.debug('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\n            return;\n        }\n\n        selectKeySystem(supportedKS, false);\n    }\n\n    function getKeySystems() {\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\n    }\n\n    function setKeySystems(keySystems) {\n        if (protectionKeyController) {\n            protectionKeyController.setKeySystems(keySystems);\n        }\n    }\n\n    function setLicenseRequestFilters(filters) {\n        licenseRequestFilters = filters;\n    }\n\n    function setLicenseResponseFilters(filters) {\n        licenseResponseFilters = filters;\n    }\n\n    function applyFilters(filters, param) {\n        if (!filters) return Promise.resolve();\n        return filters.reduce((prev, next) => {\n            return prev.then(() => {\n                return next(param);\n            });\n        }, Promise.resolve());\n    }\n\n    instance = {\n        initializeForMedia,\n        clearMediaInfoArrayByStreamId,\n        createKeySession,\n        loadKeySession,\n        removeKeySession,\n        closeKeySession,\n        setServerCertificate,\n        setMediaElement,\n        setSessionType,\n        setRobustnessLevel,\n        setProtectionData,\n        getSupportedKeySystemsFromContentProtection,\n        getKeySystems,\n        setKeySystems,\n        setLicenseRequestFilters,\n        setLicenseResponseFilters,\n        stop,\n        reset\n    };\n\n    setup();\n    return instance;\n}\n\nProtectionController.__dashjs_factory_name = 'ProtectionController';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Represents a 128-bit keyID and 128-bit encryption key\n * @ignore\n */\nclass KeyPair {\n    /**\n     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding\n     * @param {string} key 128-bit encryption key, base64 encoded, with no padding\n     * @class\n     * @ignore\n     */\n    constructor(keyID, key) {\n        this.keyID = keyID;\n        this.key = key;\n    }\n}\n\nexport default KeyPair;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\n *  type\n * @ignore\n */\nclass ClearKeyKeySet {\n    /**\n     * @param {Array.<KeyPair>} keyPairs\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\n     * or 'temporary'.  Can also be null or undefined.\n     * @class\n     * @ignore\n     */\n    constructor(keyPairs, type) {\n        if (type && type !== 'persistent' && type !== 'temporary')\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\n        this.keyPairs = keyPairs;\n        this.type = type;\n    }\n\n    /**\n     * Convert this key set to its JSON Web Key (JWK) representation\n     *\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\n     */\n    toJWK() {\n        let i;\n        let numKeys = this.keyPairs.length;\n        let jwk = {keys: []};\n\n        for (i = 0; i < numKeys; i++) {\n            let key = {\n                kty: 'oct',\n                alg: 'A128KW',\n                kid: this.keyPairs[i].keyID,\n                k: this.keyPairs[i].key\n            };\n            jwk.keys.push(key);\n        }\n        if (this.type) {\n            jwk.type = this.type;\n        }\n        let jwkString = JSON.stringify(jwk);\n        const len = jwkString.length;\n\n        // Convert JSON string to ArrayBuffer\n        let buf = new ArrayBuffer(len);\n        let bView = new Uint8Array(buf);\n        for (i = 0; i < len; i++)\n            bView[i] = jwkString.charCodeAt(i);\n        return buf;\n    }\n}\n\nexport default ClearKeyKeySet;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Protection Constants declaration\n * @class\n * @ignore\n */\nclass ProtectionConstants {\n\n    init () {\n        this.CLEARKEY_KEYSTEM_STRING = 'org.w3.clearkey';\n        this.WIDEVINE_KEYSTEM_STRING = 'com.widevine.alpha';\n        this.PLAYREADY_KEYSTEM_STRING = 'com.microsoft.playready';\n    }\n\n    constructor () {\n        this.init();\n    }\n}\n\nlet constants = new ProtectionConstants();\nexport default constants;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemClearKey(config) {\n\n    config = config || {};\n    let instance;\n    const BASE64 = config.BASE64;\n    const LICENSE_SERVER_MANIFEST_CONFIGURATIONS = {\n        attributes: ['Laurl', 'laurl'],\n        prefixes: ['clearkey', 'dashif']\n    };\n\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp, cencContentProtection) {\n        try {\n            let initData = CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n\n            if (!initData && cencContentProtection) {\n                const cencDefaultKid = cencDefaultKidToBase64Representation(cencContentProtection['cenc:default_KID']);\n                const data = {kids: [cencDefaultKid]};\n                initData = new TextEncoder().encode(JSON.stringify(data));\n            }\n\n            return initData;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function cencDefaultKidToBase64Representation(cencDefaultKid) {\n        try {\n            let kid = cencDefaultKid.replace(/-/g, '');\n            kid = btoa(kid.match(/\\w{2}/g).map((a) => {\n                return String.fromCharCode(parseInt(a, 16));\n            }).join(''));\n            return kid.replace(/=/g, '');\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        // Set content type to application/json by default\n        return {\n            'Content-Type': 'application/json'\n        };\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getLicenseServerUrlFromMediaInfo(mediaInfo) {\n        try {\n            if (!mediaInfo || mediaInfo.length === 0) {\n                return null;\n            }\n            let i = 0;\n            let licenseServer = null;\n            while (i < mediaInfo.length && !licenseServer) {\n                const info = mediaInfo[i];\n                if (info && info.contentProtection && info.contentProtection.length > 0) {\n                    const clearkeyProtData = info.contentProtection.filter((cp) => {\n                        return cp.schemeIdUri && cp.schemeIdUri === schemeIdURI;\n                    });\n                    if (clearkeyProtData && clearkeyProtData.length > 0) {\n                        let j = 0;\n                        while (j < clearkeyProtData.length && !licenseServer) {\n                            const ckData = clearkeyProtData[j];\n                            let k = 0;\n                            while (k < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes.length && !licenseServer) {\n                                let l = 0;\n                                const attribute = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes[k];\n                                while (l < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes.length && !licenseServer) {\n                                    const prefix = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes[l];\n                                    if (ckData[attribute] && ckData[attribute].__prefix && ckData[attribute].__prefix === prefix && ckData[attribute].__text) {\n                                        licenseServer = ckData[attribute].__text;\n                                    }\n                                    l += 1;\n                                }\n                                k += 1;\n                            }\n                            j += 1;\n                        }\n                    }\n                }\n                i += 1;\n            }\n            return licenseServer;\n        } catch\n            (e) {\n            return null;\n        }\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getLicenseServerUrlFromMediaInfo,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemW3CClearKey(config) {\n    let instance;\n    const BASE64 = config.BASE64;\n    const logger = config.debug.getLogger(instance);\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionDataSet} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n\n            logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Google Widevine DRM\n *\n * @class\n * @implements MediaPlayer.dependencies.protection.KeySystem\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nconst systemString = ProtectionConstants.WIDEVINE_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemWidevine(config) {\n\n    config = config || {};\n    let instance;\n    let protData = null;\n    const BASE64 = config.BASE64;\n\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage( /*message*/ ) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData( /*initData*/ ) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(cp) {\n        // Get sessionId from protectionData or from manifest\n        if (protData && protData.sessionId) {\n            return protData.sessionId;\n        } else if (cp && cp.sessionId) {\n            return cp.sessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        init: init,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId\n    };\n\n    return instance;\n}\n\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\nlet protData;\n\nfunction KeySystemPlayReady(config) {\n\n    config = config || {};\n    let instance;\n    let messageFormat = 'utf-16';\n    const BASE64 = config.BASE64;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getRequestHeadersFromMessage(message) {\n        let msg,\n            xmlDoc;\n        const headers = {};\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        const headerNameList = xmlDoc.getElementsByTagName('name');\n        const headerValueList = xmlDoc.getElementsByTagName('value');\n        for (let i = 0; i < headerNameList.length; i++) {\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n        }\n        // Some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n        // this is NOT w3c conform and license servers may reject the request!\n        // -> rename it to proper w3c definition!\n        if (headers.hasOwnProperty('Content')) {\n            headers['Content-Type'] = headers.Content;\n            delete headers.Content;\n        }\n        // Set Content-Type header by default if not provided in the the CDM message (<PlayReadyKeyMessage/>)\n        // or if the message contains directly the challenge itself (Ex: LG SmartTVs)\n        if (!headers.hasOwnProperty('Content-Type')) {\n            headers['Content-Type'] = 'text/xml; charset=utf-8';\n        }\n        return headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        let licenseRequest = null;\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        checkConfig();\n        const msg = String.fromCharCode.apply(null, dataview);\n        const xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        if (xmlDoc.getElementsByTagName('PlayReadyKeyMessage')[0]) {\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n            if (Challenge) {\n                licenseRequest = BASE64.decode(Challenge);\n            }\n        } else {\n            // The message from CDM is not a wrapped message as on IE11 and Edge,\n            // thus it contains direclty the challenge itself\n            // (note that the xmlDoc at this point may be unreadable since it may have been interpreted as UTF-16)\n            return message;\n        }\n\n        return licenseRequest;\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            const data = new DataView(initData);\n            const numRecords = data.getUint16(4, true);\n            let offset = 6;\n            const parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                const recordType = data.getUint16(offset, true);\n                offset += 2;\n                const recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                const recordData = initData.slice(offset, offset + recordLength);\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                // First try <LA_URL>\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n                    if (laurl) {\n                        return laurl;\n                    }\n                }\n\n                // Optionally, try <LUI_URL>\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n                    if (luiurl) {\n                        return luiurl;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        checkConfig();\n        if (!cpData) {\n            return null;\n        }\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf-8\" or \"utf-16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf-8' && format !== 'utf-16') {\n            throw new Error('Specified message format is not one of \"utf-8\" or \"utf-16\"');\n        }\n        messageFormat = format;\n    }\n\n    /**\n     * Initialize the Key system with protection data\n     * @param {Object} protectionData the protection data\n     */\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n\n    /**\n     * Get Playready Custom data\n     */\n    function getCDMData() {\n        let customData,\n            cdmData,\n            cdmDataBytes,\n            i;\n\n        checkConfig();\n        if (protData && protData.cdmData) {\n            // Convert custom data into multibyte string\n            customData = [];\n            for (i = 0; i < protData.cdmData.length; ++i) {\n                customData.push(protData.cdmData.charCodeAt(i));\n                customData.push(0);\n            }\n            customData = String.fromCharCode.apply(null, customData);\n\n            // Encode in Base 64 the custom data string\n            customData = BASE64.encode(customData);\n\n            // Initialize CDM data with Base 64 encoded custom data\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\n\n            // Convert CDM data into multibyte characters\n            cdmDataBytes = [];\n            for (i = 0; i < cdmData.length; ++i) {\n                cdmDataBytes.push(cdmData.charCodeAt(i));\n                cdmDataBytes.push(0);\n            }\n\n            return new Uint8Array(cdmDataBytes).buffer;\n        }\n\n        return null;\n    }\n\n    function getSessionId(cp) {\n        // Get sessionId from protectionData or from manifest\n        if (protData && protData.sessionId) {\n            return protData.sessionId;\n        } else if (cp && cp.sessionId) {\n            return cp.sessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\n        init: init\n    };\n\n    return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CastLabs DRMToday License Server implementation\n *\n * @implements LicenseServer\n * @class\n */\n\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction DRMToday(config) {\n\n    config = config || {};\n    const BASE64 = config.BASE64;\n\n    const keySystems = {};\n    keySystems[ProtectionConstants.WIDEVINE_KEYSTEM_STRING] = {\n        responseType: 'json',\n        getLicenseMessage: function (response) {\n            return BASE64.decodeArray(response.license);\n        },\n        getErrorResponse: function (response) {\n            return response;\n        }\n    };\n    keySystems[ProtectionConstants.PLAYREADY_KEYSTEM_STRING] = {\n        responseType: 'arraybuffer',\n        getLicenseMessage: function (response) {\n            return response;\n        },\n        getErrorResponse: function (response) {\n            return String.fromCharCode.apply(null, new Uint8Array(response));\n        }\n    };\n\n    let instance;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].responseType;\n    }\n\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\n        checkConfig();\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n    }\n\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nDRMToday.__dashjs_factory_name = 'DRMToday';\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global escape: true */\n\n/**\n * Microsoft PlayReady Test License Server\n *\n * For testing content that uses the PlayReady test server at\n *\n * @implements LicenseServer\n * @class\n * @ignore\n */\n\nfunction PlayReady() {\n\n    let instance;\n\n    const soap = 'http://schemas.xmlsoap.org/soap/envelope/';\n\n    function uintToString(arrayBuffer) {\n        const encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n\n    function parseServerResponse(serverResponse) {\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n\n            if (fault) {\n                return null;\n            }\n        }\n        return serverResponse;\n    }\n\n    function parseErrorResponse(serverResponse) {\n        let faultstring = '';\n        let statusCode = '';\n        let message = '';\n        let idStart = -1;\n        let idEnd = -1;\n\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n            const detail = fault ? fault.getElementsByTagName('detail')[0] : null;\n            const exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\n            let node = null;\n\n            if (fault === null) {\n                return stringResponse;\n            }\n\n            node = fault.getElementsByTagName('faultstring')[0].firstChild;\n            faultstring = node ? node.nodeValue : null;\n\n            if (exception !== null) {\n                node = exception.getElementsByTagName('StatusCode')[0];\n                statusCode = node ? node.firstChild.nodeValue : null;\n                node = exception.getElementsByTagName('Message')[0];\n                message = node ? node.firstChild.nodeValue : null;\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\n                idEnd = message ? message.indexOf(']') : -1;\n                message = message ? message.substring(idStart, idEnd) : '';\n            }\n        }\n\n        let errorString = `code: ${statusCode}, name: ${faultstring}`;\n        if (message) {\n            errorString += `, message: ${message}`;\n        }\n\n        return errorString;\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return parseServerResponse.call(this, serverResponse);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return parseErrorResponse.call(this, serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nPlayReady.__dashjs_factory_name = 'PlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @ignore\n */\nfunction Widevine() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return serverResponse;\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nWidevine.__dashjs_factory_name = 'Widevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(Widevine); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CableLabs ClearKey license server implementation\n *\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\n *\n * @implements LicenseServer\n * @class\n */\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\n\nfunction ClearKey() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /* message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr*/) {\n        return 'json';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        if (!serverResponse.hasOwnProperty('keys')) {\n            return null;\n        }\n        let keyPairs = [];\n        for (let i = 0; i < serverResponse.keys.length; i++) {\n            let keypair = serverResponse.keys[i];\n            let keyid = keypair.kid.replace(/=/g, '');\n            let key = keypair.k.replace(/=/g, '');\n\n            keyPairs.push(new KeyPair(keyid, key));\n        }\n        return new ClearKeyKeySet(keyPairs);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nClearKey.__dashjs_factory_name = 'ClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(ClearKey); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport CommonEncryption from './../CommonEncryption';\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\nimport KeySystemW3CClearKey from './../drm/KeySystemW3CClearKey';\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\nimport DRMToday from './../servers/DRMToday';\nimport PlayReady from './../servers/PlayReady';\nimport Widevine from './../servers/Widevine';\nimport ClearKey from './../servers/ClearKey';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\n/**\n * @module ProtectionKeyController\n * @ignore\n * @description Media protection key system functionality that can be modified/overridden by applications\n */\nfunction ProtectionKeyController() {\n\n    let context = this.context;\n\n    let instance,\n        debug,\n        logger,\n        keySystems,\n        BASE64,\n        clearkeyKeySystem,\n        clearkeyW3CKeySystem;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.debug) {\n            debug = config.debug;\n            logger = debug.getLogger(instance);\n        }\n\n        if (config.BASE64) {\n            BASE64 = config.BASE64;\n        }\n    }\n\n    function initialize() {\n        keySystems = [];\n\n        let keySystem;\n\n        // PlayReady\n        keySystem = KeySystemPlayReady(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n\n        // Widevine\n        keySystem = KeySystemWidevine(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n\n        // ClearKey\n        keySystem = KeySystemClearKey(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n        clearkeyKeySystem = keySystem;\n\n        // W3C ClearKey\n        keySystem = KeySystemW3CClearKey(context).getInstance({BASE64: BASE64, debug: debug});\n        keySystems.push(keySystem);\n        clearkeyW3CKeySystem = keySystem;\n    }\n\n    /**\n     * Returns a prioritized list of key systems supported\n     * by this player (not necessarily those supported by the\n     * user agent)\n     *\n     * @returns {Array.<KeySystem>} a prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystems() {\n        return keySystems;\n    }\n\n    /**\n     * Sets the prioritized list of key systems to be supported\n     * by this player.\n     *\n     * @param {Array.<KeySystem>} newKeySystems the new prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function setKeySystems(newKeySystems) {\n        keySystems = newKeySystems;\n    }\n\n    /**\n     * Returns the key system associated with the given key system string\n     * name (i.e. 'org.w3.clearkey')\n     *\n     * @param {string} systemString the system string\n     * @returns {KeySystem|null} the key system\n     * or null if no supported key system is associated with the given key\n     * system string\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystemBySystemString(systemString) {\n        for (let i = 0; i < keySystems.length; i++) {\n            if (keySystems[i].systemString === systemString) {\n                return keySystems[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Determines whether the given key system is ClearKey.  This is\n     * necessary because the EME spec defines ClearKey and its method\n     * for providing keys to the key session; and this method has changed\n     * between the various API versions.  Our EME-specific ProtectionModels\n     * must know if the system is ClearKey so that it can format the keys\n     * according to the particular spec version.\n     *\n     * @param {Object} keySystem the key\n     * @returns {boolean} true if this is the ClearKey key system, false\n     * otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function isClearKey(keySystem) {\n        return (keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem);\n    }\n\n    /**\n     * Check equality of initData array buffers.\n     *\n     * @param {ArrayBuffer} initData1 - first initData\n     * @param {ArrayBuffer} initData2 - second initData\n     * @returns {boolean} true if the initData arrays are equal in size and\n     * contents, false otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function initDataEquals(initData1, initData2) {\n        if (initData1.byteLength === initData2.byteLength) {\n            let data1 = new Uint8Array(initData1);\n            let data2 = new Uint8Array(initData2);\n\n            for (let j = 0; j < data1.length; j++) {\n                if (data1[j] !== data2[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        let cp, ks, ksIdx, cpIdx;\n        let supportedKS = [];\n\n        if (cps) {\n            const cencContentProtection = CommonEncryption.findCencContentProtection(cps);\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n                ks = keySystems[ksIdx];\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n                    cp = cps[cpIdx];\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n                        // Look for DRM-specific ContentProtection\n                        let initData = ks.getInitData(cp, cencContentProtection);\n\n                        supportedKS.push({\n                            ks: keySystems[ksIdx],\n                            initData: initData,\n                            cdmData: ks.getCDMData(),\n                            sessionId: ks.getSessionId(cp)\n                        });\n                    }\n                }\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns key systems supported by this player for the given PSSH\n     * initializationData. Only key systems supported by this player\n     * that have protection data present will be returned.  Key systems are returned in priority order\n     * (highest priority first)\n     *\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n     * supported by the content\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\n     * supported by the content\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystems(initData, protDataSet) {\n        let supportedKS = [];\n        let pssh = CommonEncryption.parsePSSHList(initData);\n        let ks, keySystemString, shouldNotFilterOutKeySystem;\n\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n            ks = keySystems[ksIdx];\n            keySystemString = ks.systemString;\n            shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\n\n            if (ks.uuid in pssh && shouldNotFilterOutKeySystem) {\n                supportedKS.push({\n                    ks: ks,\n                    initData: pssh[ks.uuid],\n                    cdmData: ks.getCDMData(),\n                    sessionId: ks.getSessionId()\n                });\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns the license server implementation data that should be used for this request.\n     *\n     * @param {KeySystem} keySystem the key system\n     * associated with this license request\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\n     * request.  Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @returns {LicenseServer|null} the license server\n     * implementation that should be used for this request or null if the player should not\n     * pass messages of the given type to a license server\n     * @memberof module:ProtectionKeyController\n     * @instance\n     *\n     */\n    function getLicenseServer(keySystem, protData, messageType) {\n\n        // Our default server implementations do not do anything with \"license-release\" or\n        // \"individualization-request\" messages, so we just send a success event\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\n            return null;\n        }\n\n        let licenseServerData = null;\n        if (protData && protData.hasOwnProperty('drmtoday')) {\n            licenseServerData = DRMToday(context).getInstance({BASE64: BASE64});\n        } else if (keySystem.systemString === ProtectionConstants.WIDEVINE_KEYSTEM_STRING) {\n            licenseServerData = Widevine(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING) {\n            licenseServerData = PlayReady(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING) {\n            licenseServerData = ClearKey(context).getInstance();\n        }\n\n        return licenseServerData;\n    }\n\n    /**\n     * Allows application-specific retrieval of ClearKey keys.\n     *\n     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {ArrayBuffer} message the key message from the CDM\n     * @return {ClearKeyKeySet|null} the clear keys associated with\n     * the request or null if no keys can be returned by this function\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\n        try {\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\n        } catch (error) {\n            logger.error('Failed to retrieve clearkeys from ProtectionData');\n            return null;\n        }\n    }\n\n    function setProtectionData(protectionDataSet) {\n        var getProtectionData = function (keySystemString) {\n            var protData = null;\n            if (protectionDataSet) {\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\n            }\n            return protData;\n        };\n\n        for (var i = 0; i < keySystems.length; i++) {\n            var keySystem = keySystems[i];\n            if (keySystem.hasOwnProperty('init')) {\n                keySystem.init(getProtectionData(keySystem.systemString));\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setProtectionData: setProtectionData,\n        isClearKey: isClearKey,\n        initDataEquals: initDataEquals,\n        getKeySystems: getKeySystems,\n        setKeySystems: setKeySystems,\n        getKeySystemBySystemString: getKeySystemBySystemString,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getSupportedKeySystems: getSupportedKeySystems,\n        getLicenseServer: getLicenseServer,\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\n        setConfig: setConfig\n    };\n\n    return instance;\n}\n\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n/**\n * @class\n  */\nclass ProtectionEvents extends EventsBase {\n    /**\n     * @description Public facing external events to be used when including protection package.\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\n     */\n    constructor () {\n        super();\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         *\n         * @ignore\n         */\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @ignore\n         */\n        this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\n\n        /**\n         * Event ID for events delivered when the status of one decryption keys has changed\n         * @ignore\n         */\n        this.INTERNAL_KEY_STATUS_CHANGED = 'internalkeyStatusChanged';\n\n        /**\n         * Event ID for events delivered when a new key has been added\n         *\n         * @constant\n         * @deprecated The latest versions of the EME specification no longer\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\n         * is preferred.\n         * @event ProtectionEvents#KEY_ADDED\n         */\n        this.KEY_ADDED = 'public_keyAdded';\n        /**\n         * Event ID for events delivered when an error is encountered by the CDM\n         * while processing a license server response message\n         * @event ProtectionEvents#KEY_ERROR\n         */\n        this.KEY_ERROR = 'public_keyError';\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         * @event ProtectionEvents#KEY_MESSAGE\n         */\n        this.KEY_MESSAGE = 'public_keyMessage';\n\n        /**\n         * Event ID for events delivered when a key session close\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\n         */\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\n\n        /**\n         * Event ID for events delivered when a new key sessions creation\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CREATED\n         */\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\n\n        /**\n         * Event ID for events delivered when a key session removal\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\n         */\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\n\n        /**\n         * Event ID for events delivered when the status of one or more\n         * decryption keys has changed\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\n         */\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\n\n        /**\n         * Event ID for events delivered when a key system access procedure\n         * has completed\n         * @ignore\n         */\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'public_keySystemAccessComplete';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\n         */\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\n\n        /**\n         * Event ID for events delivered when a license request procedure\n         * has completed\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\n         */\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\n\n        /**\n         * Sending a license rquest\n         * @event ProtectionEvents#LICENSE_REQUEST_SENDING\n         */\n        this.LICENSE_REQUEST_SENDING = 'public_licenseRequestSending';\n\n        /**\n         * Event ID for needkey/encrypted events\n         * @ignore\n         */\n        this.NEED_KEY = 'needkey';\n\n        /**\n         * Event ID for events delivered when the Protection system is detected and created.\n         * @event ProtectionEvents#PROTECTION_CREATED\n         */\n        this.PROTECTION_CREATED = 'public_protectioncreated';\n\n        /**\n         * Event ID for events delivered when the Protection system is destroyed.\n         * @event ProtectionEvents#PROTECTION_DESTROYED\n         */\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\n\n        /**\n         * Event ID for events delivered when a new server certificate has\n         * been delivered to the CDM\n         * @ignore\n         */\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\n\n        /**\n         * Event ID for events delivered when the process of shutting down\n         * a protection set has completed\n         * @ignore\n         */\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\n\n        /**\n         * Event ID for events delivered when a HTMLMediaElement has been\n         * associated with the protection set\n         * @ignore\n         */\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\n\n        /**\n         * Triggered when the key session has been updated successfully\n         * @ignore\n         */\n        this.KEY_SESSION_UPDATED = 'public_keySessionUpdated';\n    }\n}\n\nlet protectionEvents = new ProtectionEvents();\nexport default protectionEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc NeedKey\n * @ignore\n */\nclass NeedKey {\n    /**\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {string} initDataType initialization data type\n     * @class\n     */\n    constructor(initData, initDataType) {\n        this.initData = initData;\n        this.initDataType = initDataType;\n    }\n}\n\nexport default NeedKey;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc EME-independent KeyMessage\n * @ignore\n */\nclass KeyMessage {\n    /**\n     * @param {SessionToken} sessionToken the session\n     * to which the key message is associated\n     * @param {ArrayBuffer} message the key message\n     * @param {string} defaultURL license acquisition URL provided by the CDM\n     * @param {string} messageType Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @class\n     */\n    constructor(sessionToken, message, defaultURL, messageType) {\n        this.sessionToken = sessionToken;\n        this.message = message;\n        this.defaultURL = defaultURL;\n        this.messageType = messageType ? messageType : 'license-request';\n    }\n}\n\nexport default KeyMessage;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Creates a new key system access token.  Represents a valid key system for\n * given piece of content and key system requirements.  Used to initialize license\n * acquisition operations.\n * @ignore\n */\nclass KeySystemAccess {\n    /**\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\n     * @param {KeySystemConfiguration} ksConfiguration the\n     * subset of configurations passed to the key system access request that are supported\n     * by this user agent\n     * @class\n     * @ignore\n     */\n    constructor(keySystem, ksConfiguration) {\n        this.keySystem = keySystem;\n        this.ksConfiguration = ksConfiguration;\n    }\n}\n\nexport default KeySystemAccess;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Most recent EME implementation\n *\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport DashJSError from '../../vo/DashJSError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction ProtectionModel_21Jan2015(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n\n    let instance,\n        logger,\n        keySystem,\n        videoElement,\n        mediaKeys,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        keySystem = null;\n        videoElement = null;\n        mediaKeys = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        const numSessions = sessions.length;\n        let session;\n\n        if (numSessions !== 0) {\n            // Called when we are done closing a session.  Success or fail\n            const done = function (session) {\n                removeSession(session);\n                if (sessions.length === 0) {\n                    if (videoElement) {\n                        videoElement.removeEventListener('encrypted', eventHandler);\n                        videoElement.setMediaKeys(null).then(function () {\n                            eventBus.trigger(events.TEARDOWN_COMPLETE);\n                        });\n                    } else {\n                        eventBus.trigger(events.TEARDOWN_COMPLETE);\n                    }\n                }\n            };\n            for (let i = 0; i < numSessions; i++) {\n                session = sessions[i];\n                (function (s) {\n                    // Override closed promise resolver\n                    session.session.closed.then(function () {\n                        done(s);\n                    });\n                    // Close the session and handle errors, otherwise promise\n                    // resolver above will be called\n                    closeKeySessionInternal(session).catch(function () {\n                        done(s);\n                    });\n\n                })(session);\n            }\n        } else {\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        }\n    }\n\n    function stop() {\n        // Close and remove not usable sessions\n        let session;\n        for (let i = 0; i < sessions.length; i++) {\n            session = sessions[i];\n            if (!session.getUsable()) {\n                closeKeySessionInternal(session).catch(function () {\n                    removeSession(session);\n                });\n            }\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i].initData) {\n                retVal.push(sessions[i].initData);\n            }\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        requestKeySystemAccessInternal(ksConfigurations, 0);\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\n            keySystem = keySystemAccess.keySystem;\n            mediaKeys = mkeys;\n            if (videoElement) {\n                videoElement.setMediaKeys(mediaKeys).then(function () {\n                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n                });\n            } else {\n                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n            }\n\n        }).catch(function () {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\n        });\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener('encrypted', eventHandler);\n            if (videoElement.setMediaKeys) {\n                videoElement.setMediaKeys(null);\n            }\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener('encrypted', eventHandler);\n            if (videoElement.setMediaKeys && mediaKeys) {\n                videoElement.setMediaKeys(mediaKeys);\n            }\n        }\n    }\n\n    function setServerCertificate(serverCertificate) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not set server certificate until you have selected a key system');\n        }\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\n            logger.info('DRM: License server certificate successfully updated.');\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);\n        }).catch(function (error) {\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, { error: new DashJSError(ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_CODE, ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE + error.name) });\n        });\n    }\n\n    function createKeySession(initData, protData, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        const session = mediaKeys.createSession(sessionType);\n        const sessionToken = createSessionToken(session, initData, sessionType);\n        const ks = this.getKeySystem();\n\n        // Generate initial key request.\n        // keyids type is used for clearkey when keys are provided directly in the protection data and then request to a license server is not needed\n        const dataType = ks.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING && (initData || (protData && protData.clearkeys)) ? 'keyids' : 'cenc';\n        session.generateRequest(dataType, initData).then(function () {\n            logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n        }).catch(function (error) {\n            // TODO: Better error string\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\n                data: null,\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Error generating key request -- ' + error.name)\n            });\n        });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        // Send our request to the key session\n        if (protectionKeyController.isClearKey(keySystem)) {\n            message = message.toJWK();\n        }\n        session.update(message)\n            .then(() => {\n                eventBus.trigger(events.KEY_SESSION_UPDATED);\n            })\n            .catch(function (error) {\n                eventBus.trigger(events.KEY_ERROR, {error: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, 'Error sending update() message! ' + error.name, sessionToken)});\n            });\n    }\n\n    function loadKeySession(sessionID, initData, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not load sessions until you have selected a key system');\n        }\n\n        // Check if session Id is not already loaded or loading\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessionID === sessions[i].sessionId) {\n                logger.warn('DRM: Ignoring session ID because we have already seen it!');\n                return;\n            }\n        }\n\n        const session = mediaKeys.createSession(sessionType);\n        const sessionToken = createSessionToken(session, initData, sessionType, sessionID);\n\n        // Load persisted session data into our newly created session object\n        session.load(sessionID).then(function (success) {\n            if (success) {\n                logger.debug('DRM: Session loaded.  SessionID = ' + sessionToken.getSessionID());\n                eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n            } else {\n                removeSession(sessionToken);\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\n                    data: null,\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session! Invalid Session ID (' + sessionID + ')')\n                });\n            }\n        }).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\n                data: null,\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session (' + sessionID + ')! ' + error.name)\n            });\n        });\n    }\n\n    function removeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        session.remove().then(function () {\n            logger.debug('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_REMOVED, { data: sessionToken.getSessionID() });\n        }, function (error) {\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {\n                data: null,\n                error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name\n            });\n\n        });\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the key session\n        closeKeySessionInternal(sessionToken).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {\n                data: null,\n                error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name\n            });\n        });\n    }\n\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\n\n        if (navigator.requestMediaKeySystemAccess === undefined ||\n            typeof navigator.requestMediaKeySystemAccess !== 'function') {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Insecure origins are not allowed' });\n            return;\n        }\n\n        (function (i) {\n            const keySystem = ksConfigurations[i].ks;\n            const configs = ksConfigurations[i].configs;\n            let systemString = keySystem.systemString;\n\n            // PATCH to support persistent licenses on Edge browser (see issue #2658)\n            if (systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING && configs[0].persistentState === 'required') {\n                systemString += '.recommendation';\n            }\n\n            navigator.requestMediaKeySystemAccess(systemString, configs).then(function (mediaKeySystemAccess) {\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\n                const configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\n                    mediaKeySystemAccess.getConfiguration() : null;\n                const keySystemAccess = new KeySystemAccess(keySystem, configuration);\n                keySystemAccess.mksa = mediaKeySystemAccess;\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: keySystemAccess });\n\n            }).catch(function (error) {\n                if (++i < ksConfigurations.length) {\n                    requestKeySystemAccessInternal(ksConfigurations, i);\n                } else {\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! ' + error.message });\n                }\n            });\n        })(idx);\n    }\n\n    function closeKeySessionInternal(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener('keystatuseschange', sessionToken);\n        session.removeEventListener('message', sessionToken);\n\n        // Send our request to the key session\n        return session.close();\n    }\n\n    // This is our main event handler for all desired HTMLMediaElement events\n    // related to EME.  These events are translated into our API-independent\n    // versions of the same events\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'encrypted':\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, event.initDataType) });\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n    function removeSession(token) {\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === token) {\n                sessions.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    function parseKeyStatus(args) {\n        // Edge and Chrome implement different version of keystatues, param are not on same order\n        let status, keyId;\n        if (args && args.length > 0) {\n            if (args[0]) {\n                if (typeof args[0] === 'string') {\n                    status = args[0];\n                } else {\n                    keyId = args[0];\n                }\n            }\n\n            if (args[1]) {\n                if (typeof args[1] === 'string') {\n                    status = args[1];\n                } else {\n                    keyId = args[1];\n                }\n            }\n        }\n        return {\n            status: status,\n            keyId: keyId\n        };\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(session, initData, sessionType, sessionID) {\n        const token = { // Implements SessionToken\n            session: session,\n            initData: initData,\n            sessionId: sessionID,\n\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'keystatuseschange':\n                        eventBus.trigger(events.KEY_STATUSES_CHANGED, { data: this });\n                        event.target.keyStatuses.forEach(function () {\n                            let keyStatus = parseKeyStatus(arguments);\n                            switch (keyStatus.status) {\n                                case 'expired':\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, { error: new DashJSError(ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE, ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE) });\n                                    break;\n                                default:\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, keyStatus);\n                                    break;\n                            }\n                        });\n                        break;\n\n                    case 'message':\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, undefined, event.messageType) });\n                        break;\n                }\n            },\n\n            getSessionID: function () {\n                return session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return session.expiration;\n            },\n\n            getKeyStatuses: function () {\n                return session.keyStatuses;\n            },\n\n            getUsable: function () {\n                let usable = false;\n                session.keyStatuses.forEach(function () {\n                    let keyStatus = parseKeyStatus(arguments);\n                    if (keyStatus.status === 'usable') {\n                        usable = true;\n                    }\n                });\n                return usable;\n            },\n\n            getSessionType: function () {\n                return sessionType;\n            }\n        };\n\n        // Add all event listeners\n        session.addEventListener('keystatuseschange', token);\n        session.addEventListener('message', token);\n\n        // Register callback for session closed Promise\n        session.closed.then(function () {\n            removeSession(token);\n            logger.debug('DRM: Session closed.  SessionID = ' + token.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CLOSED, { data: token.getSessionID() });\n        });\n\n        // Add to our session list\n        sessions.push(token);\n\n        return token;\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        setServerCertificate: setServerCertificate,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        stop: stop,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\n *\n * Implemented by Internet Explorer 11 (Windows 8.1)\n *\n * @implements ProtectionModel\n * @class\n */\n\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport DashJSError from '../../vo/DashJSError';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_3Feb2014(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        mediaKeys,\n        keySystemAccess,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        mediaKeys = null;\n        keySystemAccess = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        try {\n            for (let i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            if (videoElement) {\n                videoElement.removeEventListener(api.needkey, eventHandler);\n            }\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        } catch (error) {\n            eventBus.trigger(events.TEARDOWN_COMPLETE, { error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message });\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                const audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n\n                // Look for supported audio container/codecs\n                if (audios && audios.length !== 0) {\n                    supportedAudio = []; // Indicates that we have a requested audio config\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\n                            supportedAudio.push(audios[audioIdx]);\n                        }\n                    }\n                }\n\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\n        }\n    }\n\n    function selectKeySystem(ksAccess) {\n        try {\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\n            keySystem = ksAccess.keySystem;\n            keySystemAccess = ksAccess;\n            if (videoElement) {\n                setMediaKeys();\n            }\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n        } catch (error) {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\n        }\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener(api.needkey, eventHandler);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.needkey, eventHandler);\n            if (mediaKeys) {\n                setMediaKeys();\n            }\n        }\n    }\n\n    function createKeySession(initData, protData, sessionType, cdmData) {\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Use the first video capability for the contentType.\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\n\n        // If player is trying to playback Audio only stream - don't error out.\n        let capabilities = null;\n\n        if (keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\n        }\n\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\n        }\n\n        if (capabilities === null) {\n            throw new Error('Can not create sessions for unknown content types.');\n        }\n\n        const contentType = capabilities.contentType;\n        const session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);\n        const sessionToken = createSessionToken(session, initData);\n\n        // Add all event listeners\n        session.addEventListener(api.error, sessionToken);\n        session.addEventListener(api.message, sessionToken);\n        session.addEventListener(api.ready, sessionToken);\n        session.addEventListener(api.close, sessionToken);\n\n        // Add to our session list\n        sessions.push(sessionToken);\n        logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n        eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the key session\n            session.update(new Uint8Array(message));\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            session.update(new Uint8Array(message.toJWK()));\n        }\n        eventBus.trigger(events.KEY_SESSION_UPDATED);\n    }\n\n    /**\n     * Close the given session and release all associated keys.  Following\n     * this call, the sessionToken becomes invalid\n     *\n     * @param {Object} sessionToken - the session token\n     */\n    function closeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener(api.error, sessionToken);\n        session.removeEventListener(api.message, sessionToken);\n        session.removeEventListener(api.ready, sessionToken);\n        session.removeEventListener(api.close, sessionToken);\n\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === sessionToken) {\n                sessions.splice(i, 1);\n                break;\n            }\n        }\n\n        // Send our request to the key session\n        session[api.release]();\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.needkey:\n                        if (event.initData) {\n                            const initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    // IE11 does not let you set MediaKeys until it has entered a certain\n    // readyState, so we need this logic to ensure we don't set the keys\n    // too early\n    function setMediaKeys() {\n        let boundDoSetKeys = null;\n        const doSetKeys = function () {\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\n            videoElement[api.setMediaKeys](mediaKeys);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        };\n        if (videoElement.readyState >= 1) {\n            doSetKeys();\n        } else {\n            boundDoSetKeys = doSetKeys.bind(this);\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\n        }\n\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(keySession, initData) {\n        return {\n            // Implements SessionToken\n            session: keySession,\n            initData: initData,\n\n            getSessionID: function () {\n                return this.session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return NaN;\n            },\n\n            getSessionType: function () {\n                return 'temporary';\n            },\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case api.error:\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\n                        eventBus.trigger(events.KEY_ERROR, { error: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, errorStr, this) });\n                        break;\n                    case api.message:\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\n                        break;\n                    case api.ready:\n                        logger.debug('DRM: Key added.');\n                        eventBus.trigger(events.KEY_ADDED);\n                        break;\n\n                    case api.close:\n                        logger.debug('DRM: Session closed.  SessionID = ' + this.getSessionID());\n                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\n                        break;\n                }\n            }\n        };\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Initial implementation of EME\n *\n * Implemented by Google Chrome prior to v36\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport DashJSError from '../../vo/DashJSError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport ProtectionErrors from '../errors/ProtectionErrors';\n\nfunction ProtectionModel_01b(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n    const errHandler = config.errHandler;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        protectionKeyController,\n\n        // With this version of the EME APIs, sessionIDs are not assigned to\n        // sessions until the first key message is received.  We are assuming\n        // that in the case of multiple sessions, key messages will be received\n        // in the order that generateKeyRequest() is called.\n        // Holding spot for newly-created sessions until we determine whether or\n        // not the CDM supports sessionIDs\n        pendingSessions,\n\n        // List of sessions that have been initialized.  Only the first position will\n        // be used in the case that the CDM does not support sessionIDs\n        sessions,\n\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n        // there is no way for us to differentiate between sessions, therefore\n        // we must only allow a single session.  Once we receive the first key\n        // message we can set this flag to determine if more sessions are allowed\n        moreSessionsAllowed,\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        eventHandler;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        pendingSessions = [];\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        if (videoElement) {\n            removeEventListeners();\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            closeKeySession(sessions[i]);\n        }\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < pendingSessions.length; i++) {\n            retVal.push(pendingSessions[i].initData);\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        let ve = videoElement;\n        if (!ve) { // Must have a video element to do this capability tests\n            ve = document.createElement('video');\n        }\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                //let audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\n        }\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystem = keySystemAccess.keySystem;\n        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement) {\n            return;\n        }\n\n        // Replacing the previous element\n        if (videoElement) {\n            removeEventListeners();\n\n            // Close any open sessions - avoids memory leak on LG webOS 2016/2017 TVs\n            for (var i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            sessions = [];\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.keyerror, eventHandler);\n            videoElement.addEventListener(api.needkey, eventHandler);\n            videoElement.addEventListener(api.keymessage, eventHandler);\n            videoElement.addEventListener(api.keyadded, eventHandler);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        }\n    }\n\n    function createKeySession(initData /*, protData, keySystemType */) {\n        if (!keySystem) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Determine if creating a new session is allowed\n        if (moreSessionsAllowed || sessions.length === 0) {\n            const newSession = { // Implements SessionToken\n                sessionID: null,\n                initData: initData,\n                getSessionID: function () {\n                    return this.sessionID;\n                },\n\n                getExpirationTime: function () {\n                    return NaN;\n                },\n\n                getSessionType: function () {\n                    return 'temporary';\n                }\n            };\n            pendingSessions.push(newSession);\n\n            // Send our request to the CDM\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\n\n            return newSession;\n\n        } else {\n            throw new Error('Multiple sessions not allowed!');\n        }\n\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const sessionID = sessionToken.sessionID;\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the CDM\n            videoElement[api.addKey](keySystem.systemString,\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            for (let i = 0; i < message.keyPairs.length; i++) {\n                videoElement[api.addKey](keySystem.systemString,\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n            }\n        }\n        eventBus.trigger(events.KEY_SESSION_UPDATED);\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the CDM\n        try {\n            videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\n        } catch (error) {\n            eventBus.trigger(events.KEY_SESSION_CLOSED, { data: null, error: 'Error closing session (' + sessionToken.sessionID + ') ' + error.message });\n        }\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                let sessionToken = null;\n                switch (event.type) {\n                    case api.needkey:\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                        eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\n                        break;\n\n                    case api.keyerror:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            let code = ProtectionErrors.MEDIA_KEYERR_CODE;\n                            let msg = '';\n                            switch (event.errorCode.code) {\n                                case 1:\n                                    code = ProtectionErrors.MEDIA_KEYERR_UNKNOWN_CODE;\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - ' + ProtectionErrors.MEDIA_KEYERR_UNKNOWN_MESSAGE;\n                                    break;\n                                case 2:\n                                    code = ProtectionErrors.MEDIA_KEYERR_CLIENT_CODE;\n                                    msg += 'MEDIA_KEYERR_CLIENT - ' + ProtectionErrors.MEDIA_KEYERR_CLIENT_MESSAGE;\n                                    break;\n                                case 3:\n                                    code = ProtectionErrors.MEDIA_KEYERR_SERVICE_CODE;\n                                    msg += 'MEDIA_KEYERR_SERVICE - ' + ProtectionErrors.MEDIA_KEYERR_SERVICE_MESSAGE;\n                                    break;\n                                case 4:\n                                    code = ProtectionErrors.MEDIA_KEYERR_OUTPUT_CODE;\n                                    msg += 'MEDIA_KEYERR_OUTPUT - ' + ProtectionErrors.MEDIA_KEYERR_OUTPUT_MESSAGE;\n                                    break;\n                                case 5:\n                                    code = ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_CODE;\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - ' + ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE;\n                                    break;\n                                case 6:\n                                    code = ProtectionErrors.MEDIA_KEYERR_DOMAIN_CODE;\n                                    msg += 'MEDIA_KEYERR_DOMAIN - ' + ProtectionErrors.MEDIA_KEYERR_DOMAIN_MESSAGE;\n                                    break;\n                            }\n                            msg += '  System Code = ' + event.systemCode;\n                            // TODO: Build error string based on key error\n                            eventBus.trigger(events.KEY_ERROR, { error: new DashJSError(code, msg, sessionToken) });\n                        } else {\n                            logger.error('No session token found for key error');\n                        }\n                        break;\n\n                    case api.keyadded:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            logger.debug('DRM: Key added.');\n                            eventBus.trigger(events.KEY_ADDED, { data: sessionToken });//TODO not sure anything is using sessionToken? why there?\n                        } else {\n                            logger.debug('No session token found for key added');\n                        }\n                        break;\n\n                    case api.keymessage:\n                        // If this CDM does not support session IDs, we will be limited\n                        // to a single session\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\n\n                        // SessionIDs supported\n                        if (moreSessionsAllowed) {\n                            // Attempt to find an uninitialized token with this sessionID\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken && pendingSessions.length > 0) {\n\n                                // This is the first message for our latest session, so set the\n                                // sessionID and add it to our list\n                                sessionToken = pendingSessions.shift();\n                                sessions.push(sessionToken);\n                                sessionToken.sessionID = event.sessionId;\n\n                                eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n                            }\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\n                            sessionToken = pendingSessions.shift();\n                            sessions.push(sessionToken);\n\n                            if (pendingSessions.length !== 0) {\n                                errHandler.error(new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_MESSAGE));\n                            }\n                        }\n\n                        if (sessionToken) {\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n\n                            // For ClearKey, the spec mandates that you pass this message to the\n                            // addKey method, so we always save it to the token since there is no\n                            // way to tell which key system is in use\n                            sessionToken.keyMessage = message;\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(sessionToken, message, event.defaultURL) });\n\n                        } else {\n                            logger.warn('No session token found for key message');\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    /**\n     * Helper function to retrieve the stored session token based on a given\n     * sessionID value\n     *\n     * @param {Array} sessionArray - the array of sessions to search\n     * @param {*} sessionID - the sessionID to search for\n     * @returns {*} the session token with the given sessionID\n     */\n    function findSessionByID(sessionArray, sessionID) {\n        if (!sessionID || !sessionArray) {\n            return null;\n        } else {\n            const len = sessionArray.length;\n            for (let i = 0; i < len; i++) {\n                if (sessionArray[i].sessionID == sessionID) {\n                    return sessionArray[i];\n                }\n            }\n            return null;\n        }\n    }\n\n    function removeEventListeners() {\n        videoElement.removeEventListener(api.keyerror, eventHandler);\n        videoElement.removeEventListener(api.needkey, eventHandler);\n        videoElement.removeEventListener(api.keymessage, eventHandler);\n        videoElement.removeEventListener(api.keyadded, eventHandler);\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ProtectionController from './controllers/ProtectionController';\nimport ProtectionKeyController from './controllers/ProtectionKeyController';\nimport ProtectionEvents from './ProtectionEvents';\nimport ProtectionErrors from './errors/ProtectionErrors';\nimport ProtectionModel_21Jan2015 from './models/ProtectionModel_21Jan2015';\nimport ProtectionModel_3Feb2014 from './models/ProtectionModel_3Feb2014';\nimport ProtectionModel_01b from './models/ProtectionModel_01b';\n\nconst APIS_ProtectionModel_01b = [\n    // Un-prefixed as per spec\n    {\n        // Video Element\n        generateKeyRequest: 'generateKeyRequest',\n        addKey: 'addKey',\n        cancelKeyRequest: 'cancelKeyRequest',\n\n        // Events\n        needkey: 'needkey',\n        keyerror: 'keyerror',\n        keyadded: 'keyadded',\n        keymessage: 'keymessage'\n    },\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\n    {\n        // Video Element\n        generateKeyRequest: 'webkitGenerateKeyRequest',\n        addKey: 'webkitAddKey',\n        cancelKeyRequest: 'webkitCancelKeyRequest',\n\n        // Events\n        needkey: 'webkitneedkey',\n        keyerror: 'webkitkeyerror',\n        keyadded: 'webkitkeyadded',\n        keymessage: 'webkitkeymessage'\n    }\n];\n\nconst APIS_ProtectionModel_3Feb2014 = [\n    // Un-prefixed as per spec\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\n    {\n        // Video Element\n        setMediaKeys: 'setMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MediaKeys',\n        // MediaKeySession\n        release: 'close',\n\n        // Events\n        needkey: 'needkey',\n        error: 'keyerror',\n        message: 'keymessage',\n        ready: 'keyadded',\n        close: 'keyclose'\n    },\n    // MS-prefixed (IE11, Windows 8.1)\n    {\n        // Video Element\n        setMediaKeys: 'msSetMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MSMediaKeys',\n        // MediaKeySession\n        release: 'close',\n        // Events\n        needkey: 'msneedkey',\n        error: 'mskeyerror',\n        message: 'mskeymessage',\n        ready: 'mskeyadded',\n        close: 'mskeyclose'\n    }\n];\n\nfunction Protection() {\n    let instance;\n    const context = this.context;\n\n    /**\n     * Create a ProtectionController and associated ProtectionModel for use with\n     * a single piece of content.\n     *\n     * @param {Object} config\n     * @return {ProtectionController} protection controller\n     *\n     */\n    function createProtectionSystem(config) {\n        let controller = null;\n\n        const protectionKeyController = ProtectionKeyController(context).getInstance();\n        protectionKeyController.setConfig({ debug: config.debug, BASE64: config.BASE64 });\n        protectionKeyController.initialize();\n\n        let protectionModel =  getProtectionModel(config);\n\n        if (!controller && protectionModel) {//TODO add ability to set external controller if still needed at all?\n            controller = ProtectionController(context).create({\n                protectionModel: protectionModel,\n                protectionKeyController: protectionKeyController,\n                eventBus: config.eventBus,\n                debug: config.debug,\n                events: config.events,\n                BASE64: config.BASE64,\n                constants: config.constants,\n                cmcdModel: config.cmcdModel,\n                settings: config.settings\n            });\n            config.capabilities.setEncryptedMediaSupported(true);\n        }\n        return controller;\n    }\n\n    function getProtectionModel(config) {\n        const debug = config.debug;\n        const logger = debug.getLogger(instance);\n        const eventBus = config.eventBus;\n        const errHandler = config.errHandler;\n        const videoElement = config.videoModel ? config.videoModel.getElement() : null;\n\n        if ((!videoElement || videoElement.onencrypted !== undefined) &&\n            (!videoElement || videoElement.mediaKeys !== undefined)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_21Jan2015)');\n            return ProtectionModel_21Jan2015(context).create({ debug: debug, eventBus: eventBus, events: config.events });\n        } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_3Feb2014)');\n            return ProtectionModel_3Feb2014(context).create({ debug: debug, eventBus: eventBus, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014) });\n        } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_01b)');\n            return ProtectionModel_01b(context).create({ debug: debug, eventBus: eventBus, errHandler: errHandler, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_01b) });\n        } else {\n            logger.warn('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');\n            return null;\n        }\n    }\n\n    function getAPI(videoElement, apis) {\n        for (let i = 0; i < apis.length; i++) {\n            const api = apis[i];\n            // detect if api is supported by browser\n            // check only first function in api -> should be fine\n            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {\n                continue;\n            }\n\n            return api;\n        }\n\n        return null;\n    }\n\n    instance = {\n        createProtectionSystem: createProtectionSystem\n    };\n\n    return instance;\n}\n\nProtection.__dashjs_factory_name = 'Protection';\nconst factory = dashjs.FactoryMaker.getClassFactory(Protection); /* jshint ignore:line */\nfactory.events = ProtectionEvents;\nfactory.errors = ProtectionErrors;\ndashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass DashJSError {\n    constructor(code, message, data) {\n        this.code = code || null;\n        this.message = message || null;\n        this.data = data || null;\n    }\n}\n\nexport default DashJSError;"],"sourceRoot":""}